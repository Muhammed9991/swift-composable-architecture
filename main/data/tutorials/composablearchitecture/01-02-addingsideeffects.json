{"identifier":{"url":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects","interfaceLanguage":"swift"},"kind":"project","variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/tutorials\/composablearchitecture\/01-02-addingsideeffects"]}],"hierarchy":{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture","modules":[{"projects":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature","sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature#Create-a-reducer"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature#Integrating-with-SwiftUI"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature#Integrating-into-the-app"}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects","sections":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects#What-is-a-side-effect","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects#Performing-a-network-request","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects#Managing-a-timer","kind":"task"}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature","sections":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Testing-state-changes","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Testing-effects","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Testing-network-requests","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Controlling-dependencies","kind":"task"}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-04-ComposingFeatures","sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-04-ComposingFeatures#Adding-a-tab-view"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-04-ComposingFeatures#Composing-reducers"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-04-ComposingFeatures#Deriving-child-stores"}]}],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture\/Essentials"},{"projects":[{"sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Project-set-up"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Integrate-reducers"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Integrate-views"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Child-to-parent-communication"}],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation"},{"sections":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations#Delete-contacts","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations#Improve-domain-modeling","kind":"task"}],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations"},{"sections":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation#Testing-the-add-contact-flow","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation#Non-exhaustive-testing","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation#Testing-the-delete-contact-flow","kind":"task"}],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation"},{"sections":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks#Contact-detail-feature","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks#Drill-down-to-contact-detail","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks#Deleting-a-contact","kind":"task"}],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks"}],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture\/Navigation"}],"paths":[["doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture","doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture\/$volume","doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture\/Essentials"]]},"sections":[{"chapter":"Essentials","estimatedTimeInMinutes":30,"title":"Adding side effects","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Learn how to communicate with the outside world in your features, and feed data from the outside"},{"type":"text","text":" "},{"type":"text","text":"back into your feature."}]}],"kind":"hero"},{"tasks":[{"title":"What is a side effect?","anchor":"What-is-a-side-effect","contentSection":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Side effects are by far the most important aspect of feature development. They are what allow"},{"type":"text","text":" "},{"type":"text","text":"us to communicate with the outside world, such as making API requests, interacting with file"},{"type":"text","text":" "},{"type":"text","text":"systems, and performing time-based asynchrony. Without them, our applications could not do"},{"type":"text","text":" "},{"type":"text","text":"anything of real value for our users."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"However, side effects are also the most complex part of our features. State mutations are"},{"type":"text","text":" "},{"type":"text","text":"simple processes. If you run the reducer with the same piece of state and same action, you will"},{"type":"text","text":" "},{"type":"text","text":"always get the same result. But effects are susceptible to the vagaries of the outside world,"},{"type":"text","text":" "},{"type":"text","text":"such as network connectivity, disk permissions, and more. Each time you run an effect, you"},{"type":"text","text":" "},{"type":"text","text":"can get back a completely different answer."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Let’s start by seeing why we can’t simply perform effectful work directly in our"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer"},{"type":"text","text":" conformances, and then we will see what tools the"},{"type":"text","text":" "},{"type":"text","text":"library provides for performing effects."}]}],"mediaPosition":"trailing","kind":"contentAndMedia"}],"stepsSection":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Let’s add a new bit of functionality to the counter feature we built in","type":"text"},{"text":" ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature"},{"text":". We will add a button that when tapped makes a network request to","type":"text"},{"text":" ","type":"text"},{"text":"fetch a fact about the number that is currently displayed.","type":"text"}]}],"caption":[{"type":"paragraph","inlineContent":[{"text":"There are two ways you can approach this. Sometimes people like to work on the reducer","type":"text"},{"text":" ","type":"text"},{"text":"first, and then the view. Others like to start with the view, which is what we will do now.","type":"text"},{"text":" ","type":"text"},{"text":"We have added an additional button to the bottom of ","type":"text"},{"type":"codeVoice","code":"CounterView"},{"text":", and when it is tapped we","type":"text"},{"text":" ","type":"text"},{"text":"will send a ","type":"text"},{"type":"codeVoice","code":"factButtonTapped"},{"text":" action, which does not yet exist in the counter domain, but","type":"text"},{"text":" ","type":"text"},{"text":"will soon.","type":"text"}]}],"runtimePreview":"02-01-image-0001.png","type":"step","media":null,"code":"01-02-01-code-0001.swift"},{"content":[{"type":"paragraph","inlineContent":[{"text":"We will also add a progress view at the bottom to display while we are loading the fact,","type":"text"},{"text":" ","type":"text"},{"text":"and we will unwrap a bit of optional state to display the fact. We are using the","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"isLoading"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"fact"},{"text":" state to accomplish this, neither of which exists in the counter","type":"text"},{"text":" ","type":"text"},{"text":"feature yet, but will soon.","type":"text"}]}],"caption":[],"runtimePreview":null,"type":"step","media":null,"code":"01-02-01-code-0002.swift"},{"inlineContent":[{"type":"text","text":"That is all it takes for the view. The code is not yet compiling because we are using state"},{"type":"text","text":" "},{"type":"text","text":"and actions that don’t yet exist, so let’s fix those errors in the reducer."}],"type":"paragraph"},{"content":[{"inlineContent":[{"type":"text","text":"Recall that this is what our "},{"type":"codeVoice","code":"CounterFeature"},{"type":"text","text":" reducer looks like so far, as built in"},{"type":"text","text":" "},{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature","type":"reference","isActive":true},{"type":"text","text":". It has a simple "},{"type":"codeVoice","code":"State"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Action"},{"type":"text","text":" type, and the reducer"},{"type":"text","text":" "},{"type":"text","text":"simply decrements or increments the "},{"type":"codeVoice","code":"count"},{"type":"text","text":" state depending on which action is sent."}],"type":"paragraph"}],"caption":[],"runtimePreview":null,"type":"step","media":null,"code":"01-02-01-code-0003.swift"},{"content":[{"inlineContent":[{"type":"text","text":"Let’s add the additional state and actions that have been dictated to us by the view."},{"type":"text","text":" "},{"type":"text","text":"We know we need some "},{"type":"codeVoice","code":"fact"},{"type":"text","text":" and "},{"type":"codeVoice","code":"isLoading"},{"type":"text","text":" state, and we need a "},{"type":"codeVoice","code":"factButtonTapped"},{"type":"text","text":" action."},{"type":"text","text":" "},{"type":"text","text":"We can also implement that action in the reducer by flipping "},{"type":"codeVoice","code":"isLoading"},{"type":"text","text":" to "},{"type":"codeVoice","code":"true"},{"type":"text","text":", and"},{"type":"text","text":" "},{"type":"text","text":"we’ll clear the "},{"type":"codeVoice","code":"fact"},{"type":"text","text":" state when any button is tapped. And finally, we will return "},{"type":"codeVoice","code":".none"},{"type":"text","text":""},{"type":"text","text":" "},{"type":"text","text":"just like we did in all the other cases."}],"type":"paragraph"}],"caption":[],"runtimePreview":null,"type":"step","media":null,"code":"01-02-01-code-0004.swift"},{"content":[{"inlineContent":[{"type":"text","text":"Now the question is: how can we perform a side-effect? We will be using"},{"type":"text","text":" "},{"type":"reference","identifier":"http:\/\/www.numbersapi.com","isActive":true},{"type":"text","text":" to fetch a fact for the state’s current count. We might"},{"type":"text","text":" "},{"type":"text","text":"hope we can just use "},{"type":"codeVoice","code":"URLSession"},{"type":"text","text":" directly in the reducer to perform some async work, but"},{"type":"text","text":" "},{"type":"text","text":"unfortunately that is not allowed."}],"type":"paragraph"}],"caption":[],"runtimePreview":null,"type":"step","media":null,"code":"01-02-01-code-0005.swift"},{"inlineContent":[{"type":"text","text":"The Composable Architecture separates the simple, pure transformations of state from the"},{"type":"text","text":" "},{"type":"text","text":"complex, messy side effects. It is one of the core tenets of the library and there are a lot"},{"type":"text","text":" "},{"type":"text","text":"of benefits to doing so. Luckily for us, the library gives us a tool that is appropriate"},{"type":"text","text":" "},{"type":"text","text":"for executing side effects. It is called "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect","isActive":true},{"type":"text","text":" and it is"},{"type":"text","text":" "},{"type":"text","text":"explored in the next section."}],"type":"paragraph"}]},{"title":"Performing a network request","anchor":"Performing-a-network-request","contentSection":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Now that we understand what a side-effect is and why they cannot be performed directly in"},{"type":"text","text":" "},{"type":"text","text":"a reducer, let’s see how to fix the code we wrote above."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The Composable Architecture bakes the notion of “effect” directly into the definition of"},{"type":"text","text":" "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","type":"reference","isActive":true},{"type":"text","text":". After a reducer processes an action by mutating"},{"type":"text","text":" "},{"type":"text","text":"state, it can return something called an "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect","type":"reference","isActive":true},{"type":"text","text":", which"},{"type":"text","text":" "},{"type":"text","text":"represents an asynchronous unit that is run by the "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","type":"reference","isActive":true},{"type":"text","text":". Effects"},{"type":"text","text":" "},{"type":"text","text":"are what can communicate with outside systems and then feed data from the outside back into"},{"type":"text","text":" "},{"type":"text","text":"the reducer."}]},{"type":"paragraph","inlineContent":[{"text":"This is exactly what we want to do for our number fact effect. We want to make a network","type":"text"},{"text":" ","type":"text"},{"text":"request, and then feed that information back into the reducer. So, let’s get started.","type":"text"}]}],"mediaPosition":"trailing","kind":"contentAndMedia"}],"stepsSection":[{"content":[{"type":"paragraph","inlineContent":[{"text":"The primary way one constructs an ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect","isActive":true},{"text":" is via the static method","type":"text"},{"text":" ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect\/run(priority:operation:catch:fileID:filePath:line:column:)","isActive":true},{"text":". This provides","type":"text"},{"text":" ","type":"text"},{"text":"you with an asynchronous context to perform any kind of work you want, as well as a handle","type":"text"},{"text":" ","type":"text"},{"text":"(","type":"text"},{"type":"codeVoice","code":"send"},{"text":") for sending actions back into the system.","type":"text"}]}],"type":"step","caption":[],"media":null,"code":"01-02-02-code-0001.swift","runtimePreview":null},{"content":[{"type":"paragraph","inlineContent":[{"text":"The trailing closure of ","type":"text"},{"code":".run","type":"codeVoice"},{"text":" is the perfect place to perform our network request to fetch","type":"text"},{"text":" ","type":"text"},{"text":"data from ","type":"text"},{"type":"reference","identifier":"http:\/\/www.numbersapi.com","isActive":true},{"text":" and turn it into a string.","type":"text"}]}],"type":"step","caption":[{"type":"aside","name":"Tip","content":[{"inlineContent":[{"type":"text","text":"Unfortunately "},{"isActive":true,"type":"reference","identifier":"http:\/\/www.numbersapi.com"},{"type":"text","text":" does not offer HTTPS, so you will need"},{"type":"text","text":" "},{"type":"text","text":"to add an entry to your application’s Info.plist in order to allow HTTP requests. See"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"https:\/\/developer.apple.com\/documentation\/bundleresources\/information_property_list\/nsapptransportsecurity"},{"type":"text","text":" article for information on how to do that."}],"type":"paragraph"}],"style":"tip"}],"media":null,"code":"01-02-02-code-0002.swift","runtimePreview":null},{"content":[{"inlineContent":[{"text":"However, it is not possible to then mutate the ","type":"text"},{"type":"codeVoice","code":"state.fact"},{"text":" in the effect after fetching","type":"text"},{"text":" ","type":"text"},{"text":"the data from the network. This is strictly enforced by the compiler since sendable closures","type":"text"},{"text":" ","type":"text"},{"text":"cannot capture ","type":"text"},{"type":"codeVoice","code":"inout"},{"text":" state. This is showing how the library chooses to separate the nice,","type":"text"},{"text":" ","type":"text"},{"text":"simple and pure state mutations that reducers perform from the messy, complex effects.","type":"text"}],"type":"paragraph"}],"type":"step","caption":[],"media":null,"code":"01-02-02-code-0003.swift","runtimePreview":null},{"content":[{"inlineContent":[{"text":"In order for us to feed the information from the effect back into our reducer we need to","type":"text"},{"text":" ","type":"text"},{"text":"introduce another action, called ","type":"text"},{"type":"codeVoice","code":"factResponse"},{"text":", and it will have an associated value of the","type":"text"},{"text":" ","type":"text"},{"text":"string that is fetched from the network. Then we can send that action in the effect after","type":"text"},{"text":" ","type":"text"},{"text":"performing the asynchronous work, and we can handle the new action by flipping ","type":"text"},{"type":"codeVoice","code":"isLoading"},{"text":" ","type":"text"},{"text":"back to ","type":"text"},{"type":"codeVoice","code":"false"},{"text":" and updating the ","type":"text"},{"type":"codeVoice","code":"fact"},{"text":" state.","type":"text"}],"type":"paragraph"}],"type":"step","caption":[{"type":"aside","style":"warning","name":"Warning","content":[{"inlineContent":[{"type":"text","text":"Currently we are ignoring any errors that can be thrown by "},{"type":"codeVoice","code":"URLSession"},{"type":"text","text":". In a"},{"type":"text","text":" "},{"type":"text","text":"more complete application you would want to leverage "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult","type":"reference","isActive":true},{"type":"text","text":" "},{"type":"text","text":"to have errors fed back into the reducer so that you can react appropriately."}],"type":"paragraph"}]}],"media":null,"code":"01-02-02-code-0004.swift","runtimePreview":null},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"We can now run the application in the simulator or in a preview and see that the feature"},{"type":"text","text":" "},{"type":"text","text":"works as we expect. We can count up to a number, tap the “Fact” button, and a moment"},{"type":"text","text":" "},{"type":"text","text":"later a fact will be displayed at the bottom of the UI."}]}],"type":"step","caption":[],"media":null,"code":"01-02-02-code-0005.swift","runtimePreview":"02-02-video-0005.mov"}]},{"title":"Managing a timer","anchor":"Managing-a-timer","contentSection":[{"kind":"contentAndMedia","content":[{"inlineContent":[{"type":"text","text":"Network requests are probably one of the most common types of side effects, but they are not"},{"type":"text","text":" "},{"type":"text","text":"the only kind. Let’s add a new bit of functionality to our counter feature. We will add"},{"type":"text","text":" "},{"type":"text","text":"another button that when tapped starts a one second repeating timer, and for each tick we will"},{"type":"text","text":" "},{"type":"text","text":"increment the state’s "},{"code":"count","type":"codeVoice"},{"type":"text","text":" by one."}],"type":"paragraph"}],"mediaPosition":"trailing"}],"stepsSection":[{"type":"step","runtimePreview":null,"media":null,"caption":[{"type":"aside","style":"note","content":[{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"code":"isTimerRunning","type":"codeVoice"},{"text":" state and ","type":"text"},{"code":"toggleTimerButtonTapped","type":"codeVoice"},{"text":" actions do not yet exist.","type":"text"},{"text":" ","type":"text"},{"text":"We will add them in the next step.","type":"text"}]}],"name":"Note"}],"code":"01-02-03-code-0001.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"We will start with the view layer, just as we did before. We will add a button that either"},{"type":"text","text":" "},{"type":"text","text":"displays “Start timer” or “Stop timer”, depending on some "},{"type":"codeVoice","code":"isTimerRunning"},{"type":"text","text":" state, and"},{"type":"text","text":" "},{"type":"text","text":"when tapped we will send a "},{"type":"codeVoice","code":"toggleTimerButtonTapped"},{"type":"text","text":" action. That’s all it takes for the"},{"type":"text","text":" "},{"type":"text","text":"view."}]}]},{"type":"step","runtimePreview":null,"media":null,"caption":[],"code":"01-02-03-code-0002.swift","content":[{"inlineContent":[{"type":"text","text":"Next we will update the reducer by adding the "},{"type":"codeVoice","code":"isTimerRunning"},{"type":"text","text":" state, a new"},{"type":"text","text":" "},{"type":"codeVoice","code":"toggleTimerButtonTapped"},{"type":"text","text":" action, and stubbing in the basics of the logic for the new"},{"type":"text","text":" "},{"type":"text","text":"action. We know we will want to execute some asynchronous work, in particular a timer, so"},{"type":"text","text":" "},{"type":"text","text":"we have gone ahead and opened up a "},{"type":"codeVoice","code":"run"},{"type":"text","text":" effect."}],"type":"paragraph"}]},{"type":"step","runtimePreview":null,"media":null,"caption":[],"code":"01-02-03-code-0003.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Inside the "},{"code":"run","type":"codeVoice"},{"type":"text","text":" effect we can emulate a very crude timer by starting an infinite "},{"code":"while","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"loop and sleeping for one second inside the loop. This is not the best way to construct a"},{"type":"text","text":" "},{"type":"text","text":"timer as it allows for drift to occur, but it will be fine for our purposes right now."}]}]},{"type":"step","runtimePreview":null,"media":null,"caption":[],"code":"01-02-03-code-0004.swift","content":[{"inlineContent":[{"type":"text","text":"In order to react to each timer tick in the reducer we need to introduce a new action,"},{"type":"text","text":" "},{"type":"codeVoice","code":"timerTick"},{"type":"text","text":", that will be sent after each "},{"type":"codeVoice","code":"Task.sleep"},{"type":"text","text":". And it’s in that action we will"},{"type":"text","text":" "},{"type":"text","text":"increment the state’s "},{"type":"codeVoice","code":"count"},{"type":"text","text":"."}],"type":"paragraph"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"However, there is a bug. If we tap the “Start timer” button to start the timer, and then tap"},{"type":"text","text":" "},{"type":"text","text":"“Stop timer”, we will see that the timer did not stop."}]},{"type":"step","runtimePreview":null,"media":null,"caption":[],"code":"01-02-03-code-0005.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"To fix the bug, we can leverage a powerful feature of the Composable Architecture known as"},{"type":"text","text":" "},{"type":"text","text":"“effect cancellation”. We can mark any effect as cancellable using the"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect\/cancellable(id:cancelInFlight:)"},{"type":"text","text":" method by providing"},{"type":"text","text":" "},{"type":"text","text":"an ID, and then at a later time we can cancel that effect using"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect\/cancel(id:)"},{"type":"text","text":"."}]}]},{"type":"step","runtimePreview":"03-03-video-0006.mp4","media":null,"caption":[],"code":"01-02-03-code-0006.swift","content":[{"inlineContent":[{"type":"text","text":"Now the feature works as we expect. We can start the timer, wait a few seconds to see it"},{"type":"text","text":" "},{"type":"text","text":"count up, and then we can stop the timer. This shows how to manage a long-living effect,"},{"type":"text","text":" "},{"type":"text","text":"including how to cancel effects."}],"type":"paragraph"}]}]}],"kind":"tasks"},{"title":"Testing your feature","abstract":[{"text":"Learn how to write test for the counter built in previous tutorials, including how to assert","type":"text"},{"text":" ","type":"text"},{"text":"against state changes and how effects execute and feed data back into the system.","type":"text"}],"kind":"callToAction","action":{"overridingTitleInlineContent":[{"text":"Get started","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature","isActive":true,"overridingTitle":"Get started","type":"reference"},"featuredEyebrow":"Tutorial"}],"metadata":{"categoryPathComponent":"MeetComposableArchitecture","category":"The Composable Architecture","title":"Adding side effects","role":"project"},"schemaVersion":{"minor":3,"major":0,"patch":0},"references":{"01-02-02-code-0002.swift":{"content":["import ComposableArchitecture","","@Reducer","struct CounterFeature {","  @ObservableState","  struct State {","    var count = 0","    var fact: String?","    var isLoading = false","  }","  ","  enum Action {","    case decrementButtonTapped","    case factButtonTapped","    case incrementButtonTapped","  }","  ","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .decrementButtonTapped:","        state.count -= 1","        state.fact = nil","        return .none","        ","      case .factButtonTapped:","        state.fact = nil","        state.isLoading = true","        return .run { [count = state.count] send in","          let (data, _) = try await URLSession.shared","            .data(from: URL(string: \"http:\/\/numbersapi.com\/\\(count)\")!)","          let fact = String(decoding: data, as: UTF8.self)","        }","        ","      case .incrementButtonTapped:","        state.count += 1","        state.fact = nil","        return .none","      }","    }","  }","}"],"fileName":"CounterFeature.swift","type":"file","highlights":[{"line":29},{"line":30},{"line":31},{"line":32}],"fileType":"swift","syntax":"swift","identifier":"01-02-02-code-0002.swift"},"01-02-03-code-0005.swift":{"highlights":[{"line":22},{"line":23},{"line":59},{"line":60},{"line":61},{"line":62},{"line":63},{"line":64},{"line":66},{"line":67},{"line":68}],"fileName":"CounterFeature.swift","type":"file","identifier":"01-02-03-code-0005.swift","fileType":"swift","syntax":"swift","content":["import ComposableArchitecture","","@Reducer","struct CounterFeature {","  @ObservableState","  struct State {","    var count = 0","    var fact: String?","    var isLoading = false","    var isTimerRunning = false","  }","  ","  enum Action {","    case decrementButtonTapped","    case factButtonTapped","    case factResponse(String)","    case incrementButtonTapped","    case timerTick","    case toggleTimerButtonTapped","  }","  ","  enum CancelID { case timer }","  ","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .decrementButtonTapped:","        state.count -= 1","        state.fact = nil","        return .none","        ","      case .factButtonTapped:","        state.fact = nil","        state.isLoading = true","        return .run { [count = state.count] send in","          let (data, _) = try await URLSession.shared","            .data(from: URL(string: \"http:\/\/numbersapi.com\/\\(count)\")!)","          let fact = String(decoding: data, as: UTF8.self)","          await send(.factResponse(fact))","        }","        ","      case let .factResponse(fact):","        state.fact = fact","        state.isLoading = false","        return .none","        ","      case .incrementButtonTapped:","        state.count += 1","        state.fact = nil","        return .none","        ","      case .timerTick:","        state.count += 1","        state.fact = nil","        return .none","        ","      case .toggleTimerButtonTapped:","        state.isTimerRunning.toggle()","        if state.isTimerRunning {","          return .run { send in","            while true {","              try await Task.sleep(for: .seconds(1))","              await send(.timerTick)","            }","          }","          .cancellable(id: CancelID.timer)","        } else {","          return .cancel(id: CancelID.timer)","        }","      }","    }","  }","}"]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-01-YourFirstPresentation":{"url":"\/tutorials\/composablearchitecture\/02-01-yourfirstpresentation","role":"project","abstract":[{"type":"text","text":"The Composable Architecture offers a variety of tools to help you present child features from"},{"type":"text","text":" "},{"type":"text","text":"parent features. To begin, we will explore presenting a feature that is driven off of optional"},{"type":"text","text":" "},{"type":"text","text":"state."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation","title":"Your first presentation","estimatedTime":"30min","type":"topic","kind":"project"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-04-ComposingFeatures#Adding-a-tab-view":{"role":"pseudoSymbol","kind":"section","type":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-04-ComposingFeatures#Adding-a-tab-view","abstract":[{"type":"text","text":"Learn what makes the Composable Architecture… well… “composable”. We will create a parent"},{"type":"text","text":" "},{"type":"text","text":"feature that contains the "},{"code":"CounterFeature","type":"codeVoice"},{"type":"text","text":" we have been building thus far."}],"url":"\/tutorials\/composablearchitecture\/01-04-composingfeatures#Adding-a-tab-view","title":"Adding a tab view"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store":{"navigatorTitle":[{"text":"Store","kind":"identifier"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","url":"\/documentation\/composablearchitecture\/store","abstract":[{"text":"A store represents the runtime that powers the application. It is the object that you will pass","type":"text"},{"text":" ","type":"text"},{"text":"around to views that need to interact with the application.","type":"text"}],"kind":"symbol","title":"Store","type":"topic","role":"symbol","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Store","kind":"identifier"}]},"01-02-01-code-0003.swift":{"highlights":[],"type":"file","fileName":"CounterFeature.swift","content":["import ComposableArchitecture","","@Reducer","struct CounterFeature {","  @ObservableState","  struct State {","    var count = 0","  }","  ","  enum Action {","    case decrementButtonTapped","    case incrementButtonTapped","  }","  ","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .decrementButtonTapped:","        state.count -= 1","        return .none","        ","      case .incrementButtonTapped:","        state.count += 1","        return .none","      }","    }","  }","}"],"identifier":"01-02-01-code-0003.swift","fileType":"swift","syntax":"swift"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-03-TestingYourFeature#Controlling-dependencies":{"title":"Controlling dependencies","url":"\/tutorials\/composablearchitecture\/01-03-testingyourfeature#Controlling-dependencies","abstract":[{"type":"text","text":"Learn how to write test for the counter built in previous tutorials, including how to assert"},{"type":"text","text":" "},{"type":"text","text":"against state changes and how effects execute and feed data back into the system."}],"kind":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Controlling-dependencies","type":"section","role":"pseudoSymbol"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-04-NavigationStacks#Deleting-a-contact":{"role":"pseudoSymbol","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks#Deleting-a-contact","kind":"section","title":"Deleting a contact","abstract":[{"type":"text","text":"We will continue with the contacts application built in previous sections by adding"},{"text":" ","type":"text"},{"text":"a navigation stack to the root of the application so that we can drill down to a contact.","type":"text"}],"type":"section","url":"\/tutorials\/composablearchitecture\/02-04-navigationstacks#Deleting-a-contact"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-02-MultipleDestinations#Delete-contacts":{"type":"section","title":"Delete contacts","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations#Delete-contacts","abstract":[{"type":"text","text":"In the previous section you learned how to model your domains so that a parent feature can"},{"type":"text","text":" "},{"type":"text","text":"present a child feature. Now let’s learn what has to be done if a parent feature wants to be"},{"type":"text","text":" "},{"type":"text","text":"able to present "},{"inlineContent":[{"type":"text","text":"many"}],"type":"emphasis"},{"type":"text","text":" features."}],"role":"pseudoSymbol","kind":"section","url":"\/tutorials\/composablearchitecture\/02-02-multipledestinations#Delete-contacts"},"doc://ComposableArchitecture/tutorials/MeetComposableArchitecture/Navigation":{"url":"\/tutorials\/meetcomposablearchitecture\/navigation","role":"article","kind":"article","title":"Navigation","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture\/Navigation","abstract":[],"type":"topic"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-01-YourFirstPresentation#Integrate-views":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Integrate-views","url":"\/tutorials\/composablearchitecture\/02-01-yourfirstpresentation#Integrate-views","kind":"section","type":"section","title":"Integrate views","abstract":[{"type":"text","text":"The Composable Architecture offers a variety of tools to help you present child features from"},{"type":"text","text":" "},{"type":"text","text":"parent features. To begin, we will explore presenting a feature that is driven off of optional"},{"type":"text","text":" "},{"type":"text","text":"state."}],"role":"pseudoSymbol"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-02-AddingSideEffects#Managing-a-timer":{"title":"Managing a timer","kind":"section","url":"\/tutorials\/composablearchitecture\/01-02-addingsideeffects#Managing-a-timer","role":"pseudoSymbol","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects#Managing-a-timer","abstract":[{"text":"Learn how to communicate with the outside world in your features, and feed data from the outside","type":"text"},{"text":" ","type":"text"},{"text":"back into your feature.","type":"text"}],"type":"section"},"doc://ComposableArchitecture/tutorials/MeetComposableArchitecture":{"url":"\/tutorials\/meetcomposablearchitecture","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture","role":"overview","abstract":[{"type":"text","text":"The Composable Architecture (TCA, for short) is a library for building applications in a"},{"type":"text","text":" "},{"type":"text","text":"consistent and understandable way, with composition, testing, and ergonomics in mind. It can be"},{"type":"text","text":" "},{"type":"text","text":"used in SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS)."}],"kind":"overview","type":"topic","title":"Meet the Composable Architecture"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-02-MultipleDestinations":{"estimatedTime":"30min","url":"\/tutorials\/composablearchitecture\/02-02-multipledestinations","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations","type":"topic","kind":"project","title":"Multiple presentation destinations","abstract":[{"text":"In the previous section you learned how to model your domains so that a parent feature can","type":"text"},{"text":" ","type":"text"},{"text":"present a child feature. Now let’s learn what has to be done if a parent feature wants to be","type":"text"},{"text":" ","type":"text"},{"text":"able to present ","type":"text"},{"inlineContent":[{"text":"many","type":"text"}],"type":"emphasis"},{"text":" features.","type":"text"}],"role":"project"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-04-NavigationStacks":{"url":"\/tutorials\/composablearchitecture\/02-04-navigationstacks","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks","role":"project","kind":"project","title":"Navigation stacks","type":"topic","estimatedTime":"30min","abstract":[{"type":"text","text":"We will continue with the contacts application built in previous sections by adding"},{"type":"text","text":" "},{"type":"text","text":"a navigation stack to the root of the application so that we can drill down to a contact."}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-03-TestingYourFeature":{"url":"\/tutorials\/composablearchitecture\/01-03-testingyourfeature","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature","role":"project","kind":"project","title":"Testing your feature","type":"topic","estimatedTime":"1hr 0min","abstract":[{"type":"text","text":"Learn how to write test for the counter built in previous tutorials, including how to assert"},{"type":"text","text":" "},{"type":"text","text":"against state changes and how effects execute and feed data back into the system."}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-03-TestingYourFeature#Testing-effects":{"role":"pseudoSymbol","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Testing-effects","title":"Testing effects","kind":"section","type":"section","abstract":[{"type":"text","text":"Learn how to write test for the counter built in previous tutorials, including how to assert"},{"type":"text","text":" "},{"type":"text","text":"against state changes and how effects execute and feed data back into the system."}],"url":"\/tutorials\/composablearchitecture\/01-03-testingyourfeature#Testing-effects"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-04-ComposingFeatures#Deriving-child-stores":{"url":"\/tutorials\/composablearchitecture\/01-04-composingfeatures#Deriving-child-stores","abstract":[{"type":"text","text":"Learn what makes the Composable Architecture… well… “composable”. We will create a parent"},{"type":"text","text":" "},{"text":"feature that contains the ","type":"text"},{"type":"codeVoice","code":"CounterFeature"},{"text":" we have been building thus far.","type":"text"}],"type":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-04-ComposingFeatures#Deriving-child-stores","title":"Deriving child stores","role":"pseudoSymbol","kind":"section"},"03-03-video-0006.mp4":{"type":"video","identifier":"03-03-video-0006.mp4","poster":null,"variants":[{"traits":["1x","light"],"url":"\/videos\/ComposableArchitecture\/03-03-video-0006.mp4"}],"alt":null},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Effect/cancellable(id:cancelInFlight:)":{"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"cancellable","kind":"identifier"},{"text":"(","kind":"text"},{"text":"id","kind":"externalParam"},{"text":": some ","kind":"text"},{"preciseIdentifier":"s:SH","text":"Hashable","kind":"typeIdentifier"},{"text":" & ","kind":"text"},{"preciseIdentifier":"s:s8SendableP","text":"Sendable","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"cancelInFlight","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Sb","text":"Bool","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"preciseIdentifier":"s:22ComposableArchitecture6EffectV","text":"Effect","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Action","kind":"typeIdentifier"},{"text":">","kind":"text"}],"role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect\/cancellable(id:cancelInFlight:)","title":"cancellable(id:cancelInFlight:)","abstract":[{"type":"text","text":"Turns an effect into one that is capable of being canceled."}],"kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/effect\/cancellable(id:cancelinflight:)"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-03-TestingPresentation#Testing-the-add-contact-flow":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation#Testing-the-add-contact-flow","kind":"section","type":"section","role":"pseudoSymbol","url":"\/tutorials\/composablearchitecture\/02-03-testingpresentation#Testing-the-add-contact-flow","title":"Testing the add contact flow","abstract":[{"text":"Learn how to write tests for features built using the library’s navigation tools, including","type":"text"},{"text":" ","type":"text"},{"text":"how multiple features integrate together and communicate with each other.","type":"text"}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-03-TestingYourFeature#Testing-network-requests":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Testing-network-requests","abstract":[{"type":"text","text":"Learn how to write test for the counter built in previous tutorials, including how to assert"},{"type":"text","text":" "},{"type":"text","text":"against state changes and how effects execute and feed data back into the system."}],"title":"Testing network requests","kind":"section","type":"section","role":"pseudoSymbol","url":"\/tutorials\/composablearchitecture\/01-03-testingyourfeature#Testing-network-requests"},"01-02-03-code-0001.swift":{"identifier":"01-02-03-code-0001.swift","content":["struct CounterView: View {","  let store: StoreOf<CounterFeature>","  ","  var body: some View {","    VStack {","      Text(\"\\(store.count)\")","        .font(.largeTitle)","        .padding()","        .background(Color.black.opacity(0.1))","        .cornerRadius(10)","      HStack {","        Button(\"-\") {","          store.send(.decrementButtonTapped)","        }","        .font(.largeTitle)","        .padding()","        .background(Color.black.opacity(0.1))","        .cornerRadius(10)","        ","        Button(\"+\") {","          store.send(.incrementButtonTapped)","        }","        .font(.largeTitle)","        .padding()","        .background(Color.black.opacity(0.1))","        .cornerRadius(10)","      }","      Button(store.isTimerRunning ? \"Stop timer\" : \"Start timer\") {","        store.send(.toggleTimerButtonTapped)","      }","      .font(.largeTitle)","      .padding()","      .background(Color.black.opacity(0.1))","      .cornerRadius(10)","      ","      Button(\"Fact\") {","        store.send(.factButtonTapped)","      }","      .font(.largeTitle)","      .padding()","      .background(Color.black.opacity(0.1))","      .cornerRadius(10)","      ","      if store.isLoading {","        ProgressView()","      } else if let fact = store.fact {","        Text(fact)","          .font(.largeTitle)","          .multilineTextAlignment(.center)","          .padding()","      }","    }","  }","}"],"type":"file","fileType":"swift","syntax":"swift","highlights":[{"line":28},{"line":29},{"line":30},{"line":31},{"line":32},{"line":33},{"line":34},{"line":35}],"fileName":"CounterFeature.swift"},"01-02-03-code-0003.swift":{"fileName":"CounterFeature.swift","type":"file","identifier":"01-02-03-code-0003.swift","syntax":"swift","fileType":"swift","content":["import ComposableArchitecture","","@Reducer","struct CounterFeature {","  @ObservableState","  struct State {","    var count = 0","    var fact: String?","    var isLoading = false","    var isTimerRunning = false","  }","  ","  enum Action {","    case decrementButtonTapped","    case factButtonTapped","    case factResponse(String)","    case incrementButtonTapped","    case toggleTimerButtonTapped","  }","  ","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .decrementButtonTapped:","        state.count -= 1","        state.fact = nil","        return .none","        ","      case .factButtonTapped:","        state.fact = nil","        state.isLoading = true","        return .run { [count = state.count] send in","          let (data, _) = try await URLSession.shared","            .data(from: URL(string: \"http:\/\/numbersapi.com\/\\(count)\")!)","          let fact = String(decoding: data, as: UTF8.self)","          await send(.factResponse(fact))","        }","        ","      case let .factResponse(fact):","        state.fact = fact","        state.isLoading = false","        return .none","        ","      case .incrementButtonTapped:","        state.count += 1","        state.fact = nil","        return .none","        ","      case .toggleTimerButtonTapped:","        state.isTimerRunning.toggle()","        return .run { send in","          while true {","            try await Task.sleep(for: .seconds(1))","          }","        }","      }","    }","  }","}"],"highlights":[{"line":52},{"line":53},{"line":54}]},"01-02-03-code-0002.swift":{"content":["import ComposableArchitecture","","@Reducer","struct CounterFeature {","  @ObservableState","  struct State {","    var count = 0","    var fact: String?","    var isLoading = false","    var isTimerRunning = false","  }","  ","  enum Action {","    case decrementButtonTapped","    case factButtonTapped","    case factResponse(String)","    case incrementButtonTapped","    case toggleTimerButtonTapped","  }","  ","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .decrementButtonTapped:","        state.count -= 1","        state.fact = nil","        return .none","        ","      case .factButtonTapped:","        state.fact = nil","        state.isLoading = true","        return .run { [count = state.count] send in","          let (data, _) = try await URLSession.shared","            .data(from: URL(string: \"http:\/\/numbersapi.com\/\\(count)\")!)","          let fact = String(decoding: data, as: UTF8.self)","          await send(.factResponse(fact))","        }","        ","      case let .factResponse(fact):","        state.fact = fact","        state.isLoading = false","        return .none","        ","      case .incrementButtonTapped:","        state.count += 1","        state.fact = nil","        return .none","        ","      case .toggleTimerButtonTapped:","        state.isTimerRunning.toggle()","        return .run { send in","        }","      }","    }","  }","}"],"fileType":"swift","identifier":"01-02-03-code-0002.swift","fileName":"CounterFeature.swift","type":"file","syntax":"swift","highlights":[{"line":10},{"line":18},{"line":48},{"line":49},{"line":50},{"line":51},{"line":52}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-04-NavigationStacks#Drill-down-to-contact-detail":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks#Drill-down-to-contact-detail","abstract":[{"type":"text","text":"We will continue with the contacts application built in previous sections by adding"},{"type":"text","text":" "},{"type":"text","text":"a navigation stack to the root of the application so that we can drill down to a contact."}],"title":"Drill-down to contact detail","type":"section","kind":"section","url":"\/tutorials\/composablearchitecture\/02-04-navigationstacks#Drill-down-to-contact-detail","role":"pseudoSymbol"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-01-YourFirstPresentation#Child-to-parent-communication":{"title":"Child-to-parent communication","url":"\/tutorials\/composablearchitecture\/02-01-yourfirstpresentation#Child-to-parent-communication","kind":"section","type":"section","role":"pseudoSymbol","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Child-to-parent-communication","abstract":[{"type":"text","text":"The Composable Architecture offers a variety of tools to help you present child features from"},{"type":"text","text":" "},{"type":"text","text":"parent features. To begin, we will explore presenting a feature that is driven off of optional"},{"type":"text","text":" "},{"type":"text","text":"state."}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Effect/cancel(id:)":{"kind":"symbol","url":"\/documentation\/composablearchitecture\/effect\/cancel(id:)","abstract":[{"text":"An effect that will cancel any currently in-flight effect with the given identifier.","type":"text"}],"type":"topic","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"cancel","kind":"identifier"},{"text":"(","kind":"text"},{"text":"id","kind":"externalParam"},{"text":": some ","kind":"text"},{"preciseIdentifier":"s:SH","text":"Hashable","kind":"typeIdentifier"},{"text":" & ","kind":"text"},{"preciseIdentifier":"s:s8SendableP","text":"Sendable","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"preciseIdentifier":"s:22ComposableArchitecture6EffectV","text":"Effect","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Action","kind":"typeIdentifier"},{"text":">","kind":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect\/cancel(id:)","role":"symbol","title":"cancel(id:)"},"01-02-01-code-0002.swift":{"syntax":"swift","highlights":[{"line":35},{"line":36},{"line":37},{"line":38},{"line":39},{"line":40},{"line":41},{"line":42},{"line":43}],"identifier":"01-02-01-code-0002.swift","type":"file","fileName":"CounterFeature.swift","fileType":"swift","content":["struct CounterView: View {","  let store: StoreOf<CounterFeature>","  ","  var body: some View {","    VStack {","      Text(\"\\(store.count)\")","        .font(.largeTitle)","        .padding()","        .background(Color.black.opacity(0.1))","        .cornerRadius(10)","      HStack {","        Button(\"-\") {","          store.send(.decrementButtonTapped)","        }","        .font(.largeTitle)","        .padding()","        .background(Color.black.opacity(0.1))","        .cornerRadius(10)","        ","        Button(\"+\") {","          store.send(.incrementButtonTapped)","        }","        .font(.largeTitle)","        .padding()","        .background(Color.black.opacity(0.1))","        .cornerRadius(10)","      }","      Button(\"Fact\") {","        store.send(.factButtonTapped)","      }","      .font(.largeTitle)","      .padding()","      .background(Color.black.opacity(0.1))","      .cornerRadius(10)","      ","      if store.isLoading {","        ProgressView()","      } else if let fact = store.fact {","        Text(fact)","          .font(.largeTitle)","          .multilineTextAlignment(.center)","          .padding()","      }","    }","  }","}"]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-01-YourFirstFeature#Integrating-with-SwiftUI":{"url":"\/tutorials\/composablearchitecture\/01-01-yourfirstfeature#Integrating-with-SwiftUI","title":"Integrating with SwiftUI","role":"pseudoSymbol","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature#Integrating-with-SwiftUI","abstract":[{"type":"text","text":"Learn how to create a reducer to implement the logic and behavior of a feature, and then"},{"type":"text","text":" "},{"type":"text","text":"learn how to hook up that feature to a SwiftUI view."}],"kind":"section","type":"section"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TaskResult":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult","deprecated":true,"title":"TaskResult","kind":"symbol","abstract":[{"text":"A value that represents either a success or a failure. This type differs from Swift’s ","type":"text"},{"type":"codeVoice","code":"Result"},{"text":" ","type":"text"},{"text":"type in that it uses only one generic for the success case, leaving the failure case as an","type":"text"},{"text":" ","type":"text"},{"text":"untyped ","type":"text"},{"type":"codeVoice","code":"Error"},{"text":".","type":"text"}],"role":"symbol","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"TaskResult","kind":"identifier"}],"url":"\/documentation\/composablearchitecture\/taskresult","type":"topic","navigatorTitle":[{"text":"TaskResult","kind":"identifier"}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-01-YourFirstFeature#Integrating-into-the-app":{"role":"pseudoSymbol","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature#Integrating-into-the-app","type":"section","url":"\/tutorials\/composablearchitecture\/01-01-yourfirstfeature#Integrating-into-the-app","abstract":[{"text":"Learn how to create a reducer to implement the logic and behavior of a feature, and then","type":"text"},{"text":" ","type":"text"},{"text":"learn how to hook up that feature to a SwiftUI view.","type":"text"}],"kind":"section","title":"Integrating into the app"},"01-02-02-code-0005.swift":{"highlights":[],"type":"file","fileName":"CounterFeature.swift","content":["import ComposableArchitecture","","@Reducer","struct CounterFeature {","  @ObservableState","  struct State {","    var count = 0","    var fact: String?","    var isLoading = false","  }","  ","  enum Action {","    case decrementButtonTapped","    case factButtonTapped","    case factResponse(String)","    case incrementButtonTapped","  }","  ","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .decrementButtonTapped:","        state.count -= 1","        state.fact = nil","        return .none","        ","      case .factButtonTapped:","        state.fact = nil","        state.isLoading = true","        return .run { [count = state.count] send in","          let (data, _) = try await URLSession.shared","            .data(from: URL(string: \"http:\/\/numbersapi.com\/\\(count)\")!)","          let fact = String(decoding: data, as: UTF8.self)","          await send(.factResponse(fact))","        }","        ","      case let .factResponse(fact):","        state.fact = fact","        state.isLoading = false","        return .none","        ","      case .incrementButtonTapped:","        state.count += 1","        state.fact = nil","        return .none","      }","    }","  }","}"],"identifier":"01-02-02-code-0005.swift","fileType":"swift","syntax":"swift"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-03-TestingPresentation#Non-exhaustive-testing":{"kind":"section","abstract":[{"text":"Learn how to write tests for features built using the library’s navigation tools, including","type":"text"},{"text":" ","type":"text"},{"text":"how multiple features integrate together and communicate with each other.","type":"text"}],"title":"Non-exhaustive testing","role":"pseudoSymbol","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation#Non-exhaustive-testing","type":"section","url":"\/tutorials\/composablearchitecture\/02-03-testingpresentation#Non-exhaustive-testing"},"01-02-02-code-0004.swift":{"fileType":"swift","fileName":"CounterFeature.swift","syntax":"swift","identifier":"01-02-02-code-0004.swift","type":"file","content":["import ComposableArchitecture","","@Reducer","struct CounterFeature {","  @ObservableState","  struct State {","    var count = 0","    var fact: String?","    var isLoading = false","  }","  ","  enum Action {","    case decrementButtonTapped","    case factButtonTapped","    case factResponse(String)","    case incrementButtonTapped","  }","  ","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .decrementButtonTapped:","        state.count -= 1","        state.fact = nil","        return .none","        ","      case .factButtonTapped:","        state.fact = nil","        state.isLoading = true","        return .run { [count = state.count] send in","          let (data, _) = try await URLSession.shared","            .data(from: URL(string: \"http:\/\/numbersapi.com\/\\(count)\")!)","          let fact = String(decoding: data, as: UTF8.self)","          await send(.factResponse(fact))","        }","        ","      case let .factResponse(fact):","        state.fact = fact","        state.isLoading = false","        return .none","        ","      case .incrementButtonTapped:","        state.count += 1","        state.fact = nil","        return .none","      }","    }","  }","}"],"highlights":[{"line":15},{"line":34},{"line":37},{"line":38},{"line":39},{"line":40},{"line":41}]},"01-02-03-code-0006.swift":{"highlights":[],"type":"file","fileName":"CounterFeature.swift","content":["import ComposableArchitecture","","@Reducer","struct CounterFeature {","  @ObservableState","  struct State {","    var count = 0","    var fact: String?","    var isLoading = false","    var isTimerRunning = false","  }","  ","  enum Action {","    case decrementButtonTapped","    case factButtonTapped","    case factResponse(String)","    case incrementButtonTapped","    case timerTick","    case toggleTimerButtonTapped","  }","  ","  enum CancelID { case timer }","  ","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .decrementButtonTapped:","        state.count -= 1","        state.fact = nil","        return .none","        ","      case .factButtonTapped:","        state.fact = nil","        state.isLoading = true","        return .run { [count = state.count] send in","          let (data, _) = try await URLSession.shared","            .data(from: URL(string: \"http:\/\/numbersapi.com\/\\(count)\")!)","          let fact = String(decoding: data, as: UTF8.self)","          await send(.factResponse(fact))","        }","        ","      case let .factResponse(fact):","        state.fact = fact","        state.isLoading = false","        return .none","        ","      case .incrementButtonTapped:","        state.count += 1","        state.fact = nil","        return .none","        ","      case .timerTick:","        state.count += 1","        state.fact = nil","        return .none","        ","      case .toggleTimerButtonTapped:","        state.isTimerRunning.toggle()","        if state.isTimerRunning {","          return .run { send in","            while true {","              try await Task.sleep(for: .seconds(1))","              await send(.timerTick)","            }","          }","          .cancellable(id: CancelID.timer)","        } else {","          return .cancel(id: CancelID.timer)","        }","      }","    }","  }","}"],"identifier":"01-02-03-code-0006.swift","fileType":"swift","syntax":"swift"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-02-AddingSideEffects#Performing-a-network-request":{"url":"\/tutorials\/composablearchitecture\/01-02-addingsideeffects#Performing-a-network-request","abstract":[{"type":"text","text":"Learn how to communicate with the outside world in your features, and feed data from the outside"},{"type":"text","text":" "},{"text":"back into your feature.","type":"text"}],"type":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects#Performing-a-network-request","title":"Performing a network request","role":"pseudoSymbol","kind":"section"},"http://www.numbersapi.com":{"type":"link","identifier":"http:\/\/www.numbersapi.com","url":"http:\/\/www.numbersapi.com","titleInlineContent":[{"type":"text","text":"numbersapi.com"}],"title":"numbersapi.com"},"02-01-image-0001.png":{"alt":null,"identifier":"02-01-image-0001.png","variants":[{"traits":["1x","light"],"url":"\/images\/ComposableArchitecture\/02-01-image-0001.png"}],"type":"image"},"02-02-video-0005.mov":{"type":"video","identifier":"02-02-video-0005.mov","poster":null,"variants":[{"traits":["1x","light"],"url":"\/videos\/ComposableArchitecture\/02-02-video-0005.mov"}],"alt":null},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Effect/run(priority:operation:catch:fileID:filePath:line:column:)":{"role":"symbol","kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect\/run(priority:operation:catch:fileID:filePath:line:column:)","type":"topic","url":"\/documentation\/composablearchitecture\/effect\/run(priority:operation:catch:fileid:filepath:line:column:)","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"run","kind":"identifier"},{"text":"(","kind":"text"},{"text":"priority","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"TaskPriority","kind":"typeIdentifier","preciseIdentifier":"s:ScP"},{"text":"?, ","kind":"text"},{"text":"operation","kind":"externalParam"},{"text":": (","kind":"text"},{"text":"Send","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture4SendV"},{"text":"<","kind":"text"},{"text":"Action","kind":"typeIdentifier"},{"text":">) ","kind":"text"},{"text":"async","kind":"keyword"},{"text":" ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Void","kind":"typeIdentifier","preciseIdentifier":"s:s4Voida"},{"text":", ","kind":"text"},{"text":"catch","kind":"externalParam"},{"text":": ((any ","kind":"text"},{"text":"Error","kind":"typeIdentifier","preciseIdentifier":"s:s5ErrorP"},{"text":", ","kind":"text"},{"text":"Send","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture4SendV"},{"text":"<","kind":"text"},{"text":"Action","kind":"typeIdentifier"},{"text":">) ","kind":"text"},{"text":"async","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Void","kind":"typeIdentifier","preciseIdentifier":"s:s4Voida"},{"text":")?, ","kind":"text"},{"text":"fileID","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"StaticString","kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV"},{"text":", ","kind":"text"},{"text":"filePath","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"StaticString","kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV"},{"text":", ","kind":"text"},{"text":"line","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"UInt","kind":"typeIdentifier","preciseIdentifier":"s:Su"},{"text":", ","kind":"text"},{"text":"column","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"UInt","kind":"typeIdentifier","preciseIdentifier":"s:Su"},{"text":") -> ","kind":"text"},{"text":"Effect","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture6EffectV"},{"text":"<","kind":"text"},{"text":"Action","kind":"typeIdentifier"},{"text":">","kind":"text"}],"abstract":[{"text":"Wraps an asynchronous unit of work that can emit actions any number of times in an effect.","type":"text"}],"title":"run(priority:operation:catch:fileID:filePath:line:column:)"},"01-02-02-code-0003.swift":{"syntax":"swift","fileName":"CounterFeature.swift","type":"file","highlights":[{"line":33},{"line":34},{"line":35}],"fileType":"swift","identifier":"01-02-02-code-0003.swift","content":["import ComposableArchitecture","","@Reducer","struct CounterFeature {","  @ObservableState","  struct State {","    var count = 0","    var fact: String?","    var isLoading = false","  }","  ","  enum Action {","    case decrementButtonTapped","    case factButtonTapped","    case incrementButtonTapped","  }","  ","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .decrementButtonTapped:","        state.count -= 1","        state.fact = nil","        return .none","        ","      case .factButtonTapped:","        state.fact = nil","        state.isLoading = true","        return .run { [count = state.count] send in","          let (data, _) = try await URLSession.shared","            .data(from: URL(string: \"http:\/\/numbersapi.com\/\\(count)\")!)","          let fact = String(decoding: data, as: UTF8.self)","          state.fact = fact","          \/\/ 🛑 Mutable capture of 'inout' parameter 'state' is not allowed in","          \/\/    concurrently-executing code","        }","        ","      case .incrementButtonTapped:","        state.count += 1","        state.fact = nil","        return .none","      }","    }","  }","}"]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-04-ComposingFeatures":{"abstract":[{"text":"Learn what makes the Composable Architecture… well… “composable”. We will create a parent","type":"text"},{"text":" ","type":"text"},{"text":"feature that contains the ","type":"text"},{"code":"CounterFeature","type":"codeVoice"},{"text":" we have been building thus far.","type":"text"}],"estimatedTime":"30min","type":"topic","url":"\/tutorials\/composablearchitecture\/01-04-composingfeatures","role":"project","title":"Composing features","kind":"project","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-04-ComposingFeatures"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-02-MultipleDestinations#Improve-domain-modeling":{"abstract":[{"type":"text","text":"In the previous section you learned how to model your domains so that a parent feature can"},{"type":"text","text":" "},{"type":"text","text":"present a child feature. Now let’s learn what has to be done if a parent feature wants to be"},{"type":"text","text":" "},{"type":"text","text":"able to present "},{"inlineContent":[{"type":"text","text":"many"}],"type":"emphasis"},{"type":"text","text":" features."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations#Improve-domain-modeling","title":"Improve domain modeling","kind":"section","type":"section","role":"pseudoSymbol","url":"\/tutorials\/composablearchitecture\/02-02-multipledestinations#Improve-domain-modeling"},"01-02-03-code-0004.swift":{"fileType":"swift","fileName":"CounterFeature.swift","syntax":"swift","identifier":"01-02-03-code-0004.swift","type":"file","content":["import ComposableArchitecture","","@Reducer","struct CounterFeature {","  @ObservableState","  struct State {","    var count = 0","    var fact: String?","    var isLoading = false","    var isTimerRunning = false","  }","  ","  enum Action {","    case decrementButtonTapped","    case factButtonTapped","    case factResponse(String)","    case incrementButtonTapped","    case timerTick","    case toggleTimerButtonTapped","  }","  ","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .decrementButtonTapped:","        state.count -= 1","        state.fact = nil","        return .none","        ","      case .factButtonTapped:","        state.fact = nil","        state.isLoading = true","        return .run { [count = state.count] send in","          let (data, _) = try await URLSession.shared","            .data(from: URL(string: \"http:\/\/numbersapi.com\/\\(count)\")!)","          let fact = String(decoding: data, as: UTF8.self)","          await send(.factResponse(fact))","        }","        ","      case let .factResponse(fact):","        state.fact = fact","        state.isLoading = false","        return .none","        ","      case .incrementButtonTapped:","        state.count += 1","        state.fact = nil","        return .none","        ","      case .timerTick:","        state.count += 1","        state.fact = nil","        return .none","        ","      case .toggleTimerButtonTapped:","        state.isTimerRunning.toggle()","        return .run { send in","          while true {","            try await Task.sleep(for: .seconds(1))","            await send(.timerTick)","          }","        }","      }","    }","  }","}"],"highlights":[{"line":18},{"line":50},{"line":51},{"line":52},{"line":53},{"line":54},{"line":60}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-03-TestingYourFeature#Testing-state-changes":{"url":"\/tutorials\/composablearchitecture\/01-03-testingyourfeature#Testing-state-changes","abstract":[{"type":"text","text":"Learn how to write test for the counter built in previous tutorials, including how to assert"},{"type":"text","text":" "},{"type":"text","text":"against state changes and how effects execute and feed data back into the system."}],"role":"pseudoSymbol","kind":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Testing-state-changes","type":"section","title":"Testing state changes"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-04-NavigationStacks#Contact-detail-feature":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks#Contact-detail-feature","url":"\/tutorials\/composablearchitecture\/02-04-navigationstacks#Contact-detail-feature","abstract":[{"type":"text","text":"We will continue with the contacts application built in previous sections by adding"},{"type":"text","text":" "},{"type":"text","text":"a navigation stack to the root of the application so that we can drill down to a contact."}],"title":"Contact detail feature","role":"pseudoSymbol","type":"section","kind":"section"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-03-TestingPresentation":{"url":"\/tutorials\/composablearchitecture\/02-03-testingpresentation","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation","kind":"project","type":"topic","estimatedTime":"40min","title":"Testing presentation","abstract":[{"text":"Learn how to write tests for features built using the library’s navigation tools, including","type":"text"},{"text":" ","type":"text"},{"text":"how multiple features integrate together and communicate with each other.","type":"text"}],"role":"project"},"doc://ComposableArchitecture/tutorials/MeetComposableArchitecture/Essentials":{"role":"article","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture\/Essentials","title":"Essentials","type":"topic","url":"\/tutorials\/meetcomposablearchitecture\/essentials","kind":"article","abstract":[]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-04-ComposingFeatures#Composing-reducers":{"kind":"section","title":"Composing reducers","role":"pseudoSymbol","type":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-04-ComposingFeatures#Composing-reducers","url":"\/tutorials\/composablearchitecture\/01-04-composingfeatures#Composing-reducers","abstract":[{"text":"Learn what makes the Composable Architecture… well… “composable”. We will create a parent","type":"text"},{"text":" ","type":"text"},{"text":"feature that contains the ","type":"text"},{"code":"CounterFeature","type":"codeVoice"},{"text":" we have been building thus far.","type":"text"}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-01-YourFirstPresentation#Integrate-reducers":{"title":"Integrate reducers","abstract":[{"type":"text","text":"The Composable Architecture offers a variety of tools to help you present child features from"},{"type":"text","text":" "},{"type":"text","text":"parent features. To begin, we will explore presenting a feature that is driven off of optional"},{"type":"text","text":" "},{"type":"text","text":"state."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Integrate-reducers","type":"section","role":"pseudoSymbol","kind":"section","url":"\/tutorials\/composablearchitecture\/02-01-yourfirstpresentation#Integrate-reducers"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-02-AddingSideEffects":{"estimatedTime":"30min","url":"\/tutorials\/composablearchitecture\/01-02-addingsideeffects","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects","role":"project","abstract":[{"type":"text","text":"Learn how to communicate with the outside world in your features, and feed data from the outside"},{"type":"text","text":" "},{"type":"text","text":"back into your feature."}],"kind":"project","type":"topic","title":"Adding side effects"},"https://developer.apple.com/documentation/bundleresources/information_property_list/nsapptransportsecurity":{"url":"https:\/\/developer.apple.com\/documentation\/bundleresources\/information_property_list\/nsapptransportsecurity","identifier":"https:\/\/developer.apple.com\/documentation\/bundleresources\/information_property_list\/nsapptransportsecurity","title":"this","titleInlineContent":[{"text":"this","type":"text"}],"type":"link"},"01-02-01-code-0004.swift":{"type":"file","identifier":"01-02-01-code-0004.swift","highlights":[{"line":8},{"line":9},{"line":14},{"line":23},{"line":26},{"line":27},{"line":28},{"line":29},{"line":30},{"line":33}],"content":["import ComposableArchitecture","","@Reducer","struct CounterFeature {","  @ObservableState","  struct State {","    var count = 0","    var fact: String?","    var isLoading = false","  }","  ","  enum Action {","    case decrementButtonTapped","    case factButtonTapped","    case incrementButtonTapped","  }","  ","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .decrementButtonTapped:","        state.count -= 1","        state.fact = nil","        return .none","        ","      case .factButtonTapped:","        state.fact = nil","        state.isLoading = true","        return .none","        ","      case .incrementButtonTapped:","        state.count += 1","        state.fact = nil","        return .none","      }","    }","  }","}"],"fileName":"CounterFeature.swift","syntax":"swift","fileType":"swift"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-01-YourFirstFeature#Create-a-reducer":{"role":"pseudoSymbol","abstract":[{"text":"Learn how to create a reducer to implement the logic and behavior of a feature, and then","type":"text"},{"text":" ","type":"text"},{"text":"learn how to hook up that feature to a SwiftUI view.","type":"text"}],"kind":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature#Create-a-reducer","url":"\/tutorials\/composablearchitecture\/01-01-yourfirstfeature#Create-a-reducer","type":"section","title":"Create a reducer"},"01-02-01-code-0001.swift":{"content":["struct CounterView: View {","  let store: StoreOf<CounterFeature>","  ","  var body: some View {","    VStack {","      Text(\"\\(store.count)\")","        .font(.largeTitle)","        .padding()","        .background(Color.black.opacity(0.1))","        .cornerRadius(10)","      HStack {","        Button(\"-\") {","          store.send(.decrementButtonTapped)","        }","        .font(.largeTitle)","        .padding()","        .background(Color.black.opacity(0.1))","        .cornerRadius(10)","        ","        Button(\"+\") {","          store.send(.incrementButtonTapped)","        }","        .font(.largeTitle)","        .padding()","        .background(Color.black.opacity(0.1))","        .cornerRadius(10)","      }","      Button(\"Fact\") {","        store.send(.factButtonTapped)","      }","      .font(.largeTitle)","      .padding()","      .background(Color.black.opacity(0.1))","      .cornerRadius(10)","    }","  }","}"],"fileType":"swift","identifier":"01-02-01-code-0001.swift","fileName":"CounterFeature.swift","type":"file","syntax":"swift","highlights":[{"line":28},{"line":29},{"line":30},{"line":31},{"line":32},{"line":33},{"line":34}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-03-TestingPresentation#Testing-the-delete-contact-flow":{"title":"Testing the delete contact flow","kind":"section","role":"pseudoSymbol","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation#Testing-the-delete-contact-flow","type":"section","url":"\/tutorials\/composablearchitecture\/02-03-testingpresentation#Testing-the-delete-contact-flow","abstract":[{"type":"text","text":"Learn how to write tests for features built using the library’s navigation tools, including"},{"type":"text","text":" "},{"type":"text","text":"how multiple features integrate together and communicate with each other."}]},"01-02-01-code-0005.swift":{"syntax":"swift","highlights":[{"line":29},{"line":30},{"line":31},{"line":32},{"line":33},{"line":34},{"line":35},{"line":36},{"line":37}],"identifier":"01-02-01-code-0005.swift","type":"file","fileName":"CounterFeature.swift","fileType":"swift","content":["import ComposableArchitecture","","@Reducer","struct CounterFeature {","  @ObservableState","  struct State {","    var count = 0","    var fact: String?","    var isLoading = false","  }","  ","  enum Action {","    case decrementButtonTapped","    case factButtonTapped","    case incrementButtonTapped","  }","  ","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .decrementButtonTapped:","        state.count -= 1","        state.fact = nil","        return .none","        ","      case .factButtonTapped:","        state.fact = nil","        state.isLoading = true","        ","        let (data, _) = try await URLSession.shared","          .data(from: URL(string: \"http:\/\/numbersapi.com\/\\(state.count)\")!)","        \/\/ 🛑 'async' call in a function that does not support concurrency","        \/\/ 🛑 Errors thrown from here are not handled","        ","        state.fact = String(decoding: data, as: UTF8.self)","        state.isLoading = false","        ","        return .none","        ","      case .incrementButtonTapped:","        state.count += 1","        state.fact = nil","        return .none","      }","    }","  }","}"]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer":{"abstract":[{"type":"text","text":"A protocol that describes how to evolve the current state of an application to the next state,"},{"type":"text","text":" "},{"type":"text","text":"given an action, and describes what "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect"},{"type":"text","text":"s should be executed later by the store, if any."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","role":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/reducer","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"Reducer"}],"title":"Reducer","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"Reducer"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Effect":{"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Effect","kind":"identifier"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect","kind":"symbol","url":"\/documentation\/composablearchitecture\/effect","abstract":[],"type":"topic","role":"symbol","navigatorTitle":[{"text":"Effect","kind":"identifier"}],"title":"Effect"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-01-YourFirstFeature":{"url":"\/tutorials\/composablearchitecture\/01-01-yourfirstfeature","role":"project","abstract":[{"type":"text","text":"Learn how to create a reducer to implement the logic and behavior of a feature, and then"},{"type":"text","text":" "},{"type":"text","text":"learn how to hook up that feature to a SwiftUI view."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature","title":"Your first feature","estimatedTime":"20min","type":"topic","kind":"project"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-02-AddingSideEffects#What-is-a-side-effect":{"role":"pseudoSymbol","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects#What-is-a-side-effect","url":"\/tutorials\/composablearchitecture\/01-02-addingsideeffects#What-is-a-side-effect","type":"section","abstract":[{"text":"Learn how to communicate with the outside world in your features, and feed data from the outside","type":"text"},{"text":" ","type":"text"},{"text":"back into your feature.","type":"text"}],"title":"What is a side effect?","kind":"section"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-01-YourFirstPresentation#Project-set-up":{"kind":"section","role":"pseudoSymbol","type":"section","abstract":[{"type":"text","text":"The Composable Architecture offers a variety of tools to help you present child features from"},{"type":"text","text":" "},{"type":"text","text":"parent features. To begin, we will explore presenting a feature that is driven off of optional"},{"type":"text","text":" "},{"type":"text","text":"state."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Project-set-up","url":"\/tutorials\/composablearchitecture\/02-01-yourfirstpresentation#Project-set-up","title":"Project set up"},"01-02-02-code-0001.swift":{"syntax":"swift","fileName":"CounterFeature.swift","type":"file","highlights":[{"line":29},{"line":30},{"line":31}],"fileType":"swift","identifier":"01-02-02-code-0001.swift","content":["import ComposableArchitecture","","@Reducer","struct CounterFeature {","  @ObservableState","  struct State {","    var count = 0","    var fact: String?","    var isLoading = false","  }","  ","  enum Action {","    case decrementButtonTapped","    case factButtonTapped","    case incrementButtonTapped","  }","  ","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .decrementButtonTapped:","        state.count -= 1","        state.fact = nil","        return .none","        ","      case .factButtonTapped:","        state.fact = nil","        state.isLoading = true","        return .run { send in","          \/\/ ✅ Do async work in here, and send actions back into the system.","        }","        ","      case .incrementButtonTapped:","        state.count += 1","        state.fact = nil","        return .none","      }","    }","  }","}"]}}}