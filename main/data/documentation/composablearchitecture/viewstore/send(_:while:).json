{"kind":"symbol","abstract":[{"text":"Sends an action into the store and then suspends while a piece of state is ","type":"text"},{"code":"true","type":"codeVoice"},{"text":".","type":"text"}],"variants":[{"paths":["\/documentation\/composablearchitecture\/viewstore\/send(_:while:)"],"traits":[{"interfaceLanguage":"swift"}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUIIntegration","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUIDeprecations","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore"]]},"deprecationSummary":[{"inlineContent":[{"text":"Use '@ObservableState', instead. See the following migration guide for more information: https:\/\/pointfreeco.github.io\/swift-composable-architecture\/main\/documentation\/composablearchitecture\/migratingto1.7#Using-ObservableState","type":"text"}],"type":"paragraph"}],"seeAlsoSections":[{"title":"Sending actions","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore\/send(_:)","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore\/yield(while:)"],"generated":true,"anchor":"Sending-actions"}],"metadata":{"externalID":"s:22ComposableArchitecture9ViewStoreC4send_5whileyq__SbxctYaF","role":"symbol","title":"send(_:while:)","symbolKind":"method","roleHeading":"Instance Method","platforms":[],"modules":[{"name":"ComposableArchitecture"}],"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"send"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"ViewAction"},{"kind":"text","text":", "},{"kind":"externalParam","text":"while"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"ViewState"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"},{"kind":"text","text":") "},{"kind":"keyword","text":"async"}]},"identifier":{"url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore\/send(_:while:)","interfaceLanguage":"swift"},"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["macOS"],"languages":["swift"],"tokens":[{"kind":"attribute","text":"@"},{"preciseIdentifier":"s:ScM","kind":"attribute","text":"MainActor"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"send"},{"kind":"text","text":"("},{"kind":"externalParam","text":"_"},{"kind":"text","text":" "},{"kind":"internalParam","text":"action"},{"kind":"text","text":": "},{"text":"ViewAction","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"while","kind":"externalParam"},{"text":" ","kind":"text"},{"text":"predicate","kind":"internalParam"},{"text":": ","kind":"text"},{"text":"@escaping","kind":"keyword"},{"text":" (","kind":"text"},{"text":"ViewState","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"preciseIdentifier":"s:Sb","kind":"typeIdentifier","text":"Bool"},{"kind":"text","text":") "},{"kind":"keyword","text":"async"}]}]},{"kind":"parameters","parameters":[{"content":[{"inlineContent":[{"type":"text","text":"An action."}],"type":"paragraph"}],"name":"action"},{"content":[{"inlineContent":[{"text":"A predicate on ","type":"text"},{"code":"ViewState","type":"codeVoice"},{"text":" that determines for how long this method should","type":"text"},{"text":" ","type":"text"},{"text":"suspend.","type":"text"}],"type":"paragraph"}],"name":"predicate"}]},{"kind":"content","content":[{"type":"heading","anchor":"discussion","text":"Discussion","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"This method can be used to interact with async\/await code, allowing you to suspend while work"},{"type":"text","text":" "},{"type":"text","text":"is being performed in an effect. One common example of this is using SwiftUI’s "},{"type":"codeVoice","code":".refreshable"},{"type":"text","text":" "},{"type":"text","text":"method, which shows a loading indicator on the screen while work is being performed."}]},{"type":"paragraph","inlineContent":[{"text":"For example, suppose we wanted to load some data from the network when a pull-to-refresh","type":"text"},{"text":" ","type":"text"},{"text":"gesture is performed on a list. The domain and logic for this feature can be modeled like so:","type":"text"}]},{"type":"codeListing","code":["@Reducer","struct Feature {","  struct State: Equatable {","    var isLoading = false","    var response: String?","  }","  enum Action {","    case pulledToRefresh","    case receivedResponse(Result<String, any Error>)","  }","  @Dependency(\\.fetch) var fetch","","  var body: some Reducer<State, Action> {","    Reduce { state, action in","      switch action {","      case .pulledToRefresh:","        state.isLoading = true","        return .run { send in","          await send(.receivedResponse(Result { try await self.fetch() }))","        }","","      case let .receivedResponse(result):","        state.isLoading = false","        state.response = try? result.value","        return .none","      }","    }","  }","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"Note that we keep track of an ","type":"text"},{"code":"isLoading","type":"codeVoice"},{"text":" boolean in our state so that we know exactly when","type":"text"},{"text":" ","type":"text"},{"text":"the network response is being performed.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The view can show the fact in a "},{"type":"codeVoice","code":"List"},{"type":"text","text":", if it’s present, and we can use the "},{"type":"codeVoice","code":".refreshable"},{"type":"text","text":" "},{"type":"text","text":"view modifier to enhance the list with pull-to-refresh capabilities:"}]},{"type":"codeListing","code":["struct MyView: View {","  let store: Store<State, Action>","","  var body: some View {","    WithViewStore(self.store, observe: { $0 }) { viewStore in","      List {","        if let response = viewStore.response {","          Text(response)","        }","      }","      .refreshable {","        await viewStore.send(.pulledToRefresh, while: \\.isLoading)","      }","    }","  }","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"Here we’ve used the ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore\/send(_:while:)","isActive":true,"type":"reference"},{"text":" method to suspend while the ","type":"text"},{"code":"isLoading","type":"codeVoice"},{"text":" state is","type":"text"},{"text":" ","type":"text"},{"code":"true","type":"codeVoice"},{"text":". Once that piece of state flips back to ","type":"text"},{"code":"false","type":"codeVoice"},{"text":" the method will resume, signaling to","type":"text"},{"text":" ","type":"text"},{"code":".refreshable","type":"codeVoice"},{"text":" that the work has finished which will cause the loading indicator to disappear.","type":"text"}]}]}],"sections":[],"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"title":"ComposableArchitecture","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","role":"collection","abstract":[{"text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent","type":"text"},{"text":" ","type":"text"},{"text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in","type":"text"},{"text":" ","type":"text"},{"text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS).","type":"text"}],"kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ViewStore":{"kind":"symbol","type":"topic","abstract":[{"text":"A ","type":"text"},{"type":"codeVoice","code":"ViewStore"},{"text":" is an object that can observe state changes and send actions. They are most","type":"text"},{"text":" ","type":"text"},{"text":"commonly used in views, such as SwiftUI views, UIView or UIViewController, but they can be used","type":"text"},{"text":" ","type":"text"},{"text":"anywhere it makes sense to observe state or send actions.","type":"text"}],"fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ViewStore","kind":"identifier"}],"role":"symbol","navigatorTitle":[{"text":"ViewStore","kind":"identifier"}],"deprecated":true,"title":"ViewStore","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore","url":"\/documentation\/composablearchitecture\/viewstore"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ViewStore/yield(while:)":{"title":"yield(while:)","type":"topic","abstract":[{"type":"text","text":"Suspends the current task while a predicate on state is "},{"type":"codeVoice","code":"true"},{"type":"text","text":"."}],"kind":"symbol","role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"yield"},{"kind":"text","text":"("},{"kind":"externalParam","text":"while"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"ViewState"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"},{"kind":"text","text":") "},{"kind":"keyword","text":"async"}],"url":"\/documentation\/composablearchitecture\/viewstore\/yield(while:)","deprecated":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore\/yield(while:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SwiftUIIntegration":{"title":"SwiftUI Integration","url":"\/documentation\/composablearchitecture\/swiftuiintegration","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUIIntegration","kind":"article","role":"collectionGroup","abstract":[{"type":"text","text":"Integrating the Composable Architecture into a SwiftUI application."}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ViewStore/send(_:while:)":{"url":"\/documentation\/composablearchitecture\/viewstore\/send(_:while:)","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore\/send(_:while:)","title":"send(_:while:)","deprecated":true,"role":"symbol","kind":"symbol","abstract":[{"type":"text","text":"Sends an action into the store and then suspends while a piece of state is "},{"type":"codeVoice","code":"true"},{"type":"text","text":"."}],"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"send","kind":"identifier"},{"text":"(","kind":"text"},{"text":"ViewAction","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"while","kind":"externalParam"},{"text":": (","kind":"text"},{"text":"ViewState","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"},{"text":") ","kind":"text"},{"text":"async","kind":"keyword"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ViewStore/send(_:)":{"deprecated":true,"url":"\/documentation\/composablearchitecture\/viewstore\/send(_:)","abstract":[{"type":"text","text":"Sends an action to the store."}],"title":"send(_:)","kind":"symbol","role":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"send"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"ViewAction"},{"kind":"text","text":") -> "},{"preciseIdentifier":"s:22ComposableArchitecture9StoreTaskV","kind":"typeIdentifier","text":"StoreTask"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore\/send(_:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SwiftUIDeprecations":{"title":"Deprecations","kind":"article","role":"collectionGroup","abstract":[{"type":"text","text":"Review unsupported SwiftUI APIs and their replacements."}],"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUIDeprecations","url":"\/documentation\/composablearchitecture\/swiftuideprecations"}}}