{"relationshipsSections":[{"kind":"relationships","identifiers":["doc:\/\/ComposableArchitecture\/10CustomDump0aB13RepresentableP","doc:\/\/ComposableArchitecture\/s8CopyableP","doc:\/\/ComposableArchitecture\/s28CustomDebugStringConvertibleP","doc:\/\/ComposableArchitecture\/s17CustomReflectableP","doc:\/\/ComposableArchitecture\/Se","doc:\/\/ComposableArchitecture\/SE","doc:\/\/ComposableArchitecture\/SQ","doc:\/\/ComposableArchitecture\/SH","doc:\/\/ComposableArchitecture\/s8SendableP"],"title":"Conforms To","type":"conformsTo"}],"sections":[],"metadata":{"symbolKind":"struct","platforms":[],"navigatorTitle":[{"kind":"identifier","text":"BindingState"}],"role":"symbol","externalID":"s:22ComposableArchitecture12BindingStateV","roleHeading":"Structure","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"BindingState"}],"title":"BindingState","modules":[{"name":"ComposableArchitecture"}]},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/composablearchitecture\/bindingstate"]}],"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["macOS"],"languages":["swift"],"tokens":[{"kind":"attribute","text":"@propertyWrapper"},{"kind":"text","text":" "},{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"BindingState"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Value"},{"kind":"text","text":">"}]}]},{"kind":"content","content":[{"level":2,"anchor":"overview","type":"heading","text":"Overview"},{"inlineContent":[{"type":"text","text":"Along with an action type that conforms to the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindableAction"},{"type":"text","text":" protocol, this type can be"},{"type":"text","text":" "},{"type":"text","text":"used to safely eliminate the boilerplate that is typically incurred when working with multiple"},{"type":"text","text":" "},{"type":"text","text":"mutable fields on state."}],"type":"paragraph"},{"name":"Note","content":[{"inlineContent":[{"text":"It is not necessary to annotate ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"every","type":"text"}]},{"text":" field with ","type":"text"},{"type":"codeVoice","code":"@BindingState"},{"text":", and in fact it is","type":"text"},{"text":" ","type":"text"},{"text":"not recommended. Marking a field with the property wrapper makes it instantly mutable from the","type":"text"},{"text":" ","type":"text"},{"text":"outside, which may hurt the encapsulation of your feature. It is best to limit the usage of","type":"text"},{"text":" ","type":"text"},{"text":"the property wrapper to only those fields that need to have bindings derived for handing to","type":"text"},{"text":" ","type":"text"},{"text":"SwiftUI components.","type":"text"}],"type":"paragraph"}],"type":"aside","style":"note"},{"inlineContent":[{"type":"text","text":"Read "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Bindings","isActive":true},{"type":"text","text":" for more information."}],"type":"paragraph"}]}],"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUIIntegration","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUIDeprecations"]]},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingState"},"schemaVersion":{"minor":3,"major":0,"patch":0},"topicSections":[{"generated":true,"identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingState\/init(wrappedValue:fileID:filePath:line:column:)"],"title":"Initializers","anchor":"Initializers"},{"generated":true,"identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingState\/projectedValue","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingState\/wrappedValue"],"title":"Instance Properties","anchor":"Instance-Properties"},{"generated":true,"identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingState\/CustomDebugStringConvertible-Implementations","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingState\/CustomDumpRepresentable-Implementations","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingState\/CustomReflectable-Implementations","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingState\/Decodable-Implementations","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingState\/Encodable-Implementations","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingState\/Equatable-Implementations","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingState\/Hashable-Implementations"],"title":"Default Implementations","anchor":"Default-Implementations"}],"seeAlsoSections":[{"generated":true,"identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingViewState","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingViewStore"],"title":"Bindings","anchor":"Bindings"}],"abstract":[{"text":"A property wrapper type that can designate properties of app state that can be directly bindable","type":"text"},{"text":" ","type":"text"},{"text":"in SwiftUI views.","type":"text"}],"deprecationSummary":[{"inlineContent":[{"type":"text","text":"Deriving bindings directly from stores using '@ObservableState'. See the following migration guide for more information: https:\/\/pointfreeco.github.io\/swift-composable-architecture\/main\/documentation\/composablearchitecture\/migratingto1.7#BindingState"}],"type":"paragraph"}],"kind":"symbol","references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/SwiftUIIntegration":{"title":"SwiftUI Integration","url":"\/documentation\/composablearchitecture\/swiftuiintegration","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUIIntegration","kind":"article","role":"collectionGroup","abstract":[{"type":"text","text":"Integrating the Composable Architecture into a SwiftUI application."}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/BindingViewState":{"url":"\/documentation\/composablearchitecture\/bindingviewstate","type":"topic","title":"BindingViewState","navigatorTitle":[{"text":"BindingViewState","kind":"identifier"}],"abstract":[{"type":"text","text":"A property wrapper type that can designate properties of view state that can be directly"},{"type":"text","text":" "},{"type":"text","text":"bindable in SwiftUI views."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingViewState","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"BindingViewState","kind":"identifier"}],"kind":"symbol","role":"symbol"},"doc://ComposableArchitecture/s8CopyableP":{"title":"Swift.Copyable","identifier":"doc:\/\/ComposableArchitecture\/s8CopyableP","type":"unresolvable"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/BindingState/CustomReflectable-Implementations":{"type":"topic","url":"\/documentation\/composablearchitecture\/bindingstate\/customreflectable-implementations","kind":"article","abstract":[],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingState\/CustomReflectable-Implementations","role":"collectionGroup","title":"CustomReflectable Implementations"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/BindingState/Encodable-Implementations":{"role":"collectionGroup","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingState\/Encodable-Implementations","url":"\/documentation\/composablearchitecture\/bindingstate\/encodable-implementations","type":"topic","title":"Encodable Implementations","kind":"article","abstract":[]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/BindableAction":{"fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"BindableAction"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindableAction","url":"\/documentation\/composablearchitecture\/bindableaction","abstract":[{"text":"An action type that exposes a ","type":"text"},{"code":"binding","type":"codeVoice"},{"text":" case that holds a ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingAction","isActive":true,"type":"reference"},{"text":".","type":"text"}],"role":"symbol","title":"BindableAction","kind":"symbol","type":"topic","navigatorTitle":[{"kind":"identifier","text":"BindableAction"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Bindings":{"kind":"article","role":"article","url":"\/documentation\/composablearchitecture\/bindings","type":"topic","title":"Working with SwiftUI bindings","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Bindings","abstract":[{"type":"text","text":"Learn how to connect features written in the Composable Architecture to SwiftUI bindings."}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/BindingState/Decodable-Implementations":{"title":"Decodable Implementations","kind":"article","url":"\/documentation\/composablearchitecture\/bindingstate\/decodable-implementations","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingState\/Decodable-Implementations","abstract":[],"role":"collectionGroup"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SwiftUIDeprecations":{"title":"Deprecations","kind":"article","role":"collectionGroup","abstract":[{"type":"text","text":"Review unsupported SwiftUI APIs and their replacements."}],"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUIDeprecations","url":"\/documentation\/composablearchitecture\/swiftuideprecations"},"doc://ComposableArchitecture/SE":{"identifier":"doc:\/\/ComposableArchitecture\/SE","type":"unresolvable","title":"Swift.Encodable"},"doc://ComposableArchitecture/s8SendableP":{"title":"Swift.Sendable","identifier":"doc:\/\/ComposableArchitecture\/s8SendableP","type":"unresolvable"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/BindingState/CustomDebugStringConvertible-Implementations":{"kind":"article","title":"CustomDebugStringConvertible Implementations","abstract":[],"type":"topic","role":"collectionGroup","url":"\/documentation\/composablearchitecture\/bindingstate\/customdebugstringconvertible-implementations","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingState\/CustomDebugStringConvertible-Implementations"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/BindingState/Equatable-Implementations":{"title":"Equatable Implementations","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingState\/Equatable-Implementations","kind":"article","role":"collectionGroup","abstract":[],"url":"\/documentation\/composablearchitecture\/bindingstate\/equatable-implementations"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/BindingState/wrappedValue":{"kind":"symbol","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"wrappedValue"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Value"}],"title":"wrappedValue","abstract":[{"text":"The underlying value wrapped by the binding state.","type":"text"}],"type":"topic","role":"symbol","url":"\/documentation\/composablearchitecture\/bindingstate\/wrappedvalue","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingState\/wrappedValue","deprecated":true},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ViewStore":{"kind":"symbol","type":"topic","abstract":[{"text":"A ","type":"text"},{"type":"codeVoice","code":"ViewStore"},{"text":" is an object that can observe state changes and send actions. They are most","type":"text"},{"text":" ","type":"text"},{"text":"commonly used in views, such as SwiftUI views, UIView or UIViewController, but they can be used","type":"text"},{"text":" ","type":"text"},{"text":"anywhere it makes sense to observe state or send actions.","type":"text"}],"fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ViewStore","kind":"identifier"}],"role":"symbol","navigatorTitle":[{"text":"ViewStore","kind":"identifier"}],"deprecated":true,"title":"ViewStore","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore","url":"\/documentation\/composablearchitecture\/viewstore"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/BindingViewStore":{"type":"topic","url":"\/documentation\/composablearchitecture\/bindingviewstore","title":"BindingViewStore","abstract":[{"text":"A property wrapper type that can derive ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingViewState","isActive":true},{"text":" values for a ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore","isActive":true},{"text":".","type":"text"}],"kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingViewStore","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"BindingViewStore","kind":"identifier"}],"role":"symbol","navigatorTitle":[{"text":"BindingViewStore","kind":"identifier"}]},"doc://ComposableArchitecture/10CustomDump0aB13RepresentableP":{"identifier":"doc:\/\/ComposableArchitecture\/10CustomDump0aB13RepresentableP","type":"unresolvable","title":"CustomDump.CustomDumpRepresentable"},"doc://ComposableArchitecture/s28CustomDebugStringConvertibleP":{"title":"Swift.CustomDebugStringConvertible","identifier":"doc:\/\/ComposableArchitecture\/s28CustomDebugStringConvertibleP","type":"unresolvable"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/BindingState/Hashable-Implementations":{"kind":"article","title":"Hashable Implementations","abstract":[],"type":"topic","role":"collectionGroup","url":"\/documentation\/composablearchitecture\/bindingstate\/hashable-implementations","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingState\/Hashable-Implementations"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/BindingAction":{"kind":"symbol","title":"BindingAction","abstract":[{"type":"text","text":"An action that describes simple mutations to some root state at a writable key path."}],"url":"\/documentation\/composablearchitecture\/bindingaction","type":"topic","role":"symbol","navigatorTitle":[{"text":"BindingAction","kind":"identifier"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingAction","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"BindingAction","kind":"identifier"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/BindingState/CustomDumpRepresentable-Implementations":{"type":"topic","abstract":[],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingState\/CustomDumpRepresentable-Implementations","kind":"article","url":"\/documentation\/composablearchitecture\/bindingstate\/customdumprepresentable-implementations","role":"collectionGroup","title":"CustomDumpRepresentable Implementations"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/BindingState/init(wrappedValue:fileID:filePath:line:column:)":{"kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingState\/init(wrappedValue:fileID:filePath:line:column:)","url":"\/documentation\/composablearchitecture\/bindingstate\/init(wrappedvalue:fileid:filepath:line:column:)","title":"init(wrappedValue:fileID:filePath:line:column:)","abstract":[{"type":"text","text":"Creates bindable state from the value of another bindable state."}],"role":"symbol","fragments":[{"text":"init","kind":"identifier"},{"text":"(","kind":"text"},{"text":"wrappedValue","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"fileID","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"StaticString","kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV"},{"text":", ","kind":"text"},{"text":"filePath","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"StaticString","kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV"},{"text":", ","kind":"text"},{"text":"line","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"UInt","kind":"typeIdentifier","preciseIdentifier":"s:Su"},{"text":", ","kind":"text"},{"text":"column","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"UInt","kind":"typeIdentifier","preciseIdentifier":"s:Su"},{"text":")","kind":"text"}],"deprecated":true,"type":"topic"},"doc://ComposableArchitecture/SQ":{"title":"Swift.Equatable","identifier":"doc:\/\/ComposableArchitecture\/SQ","type":"unresolvable"},"doc://ComposableArchitecture/Se":{"title":"Swift.Decodable","identifier":"doc:\/\/ComposableArchitecture\/Se","type":"unresolvable"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/BindingState":{"title":"BindingState","role":"symbol","deprecated":true,"kind":"symbol","url":"\/documentation\/composablearchitecture\/bindingstate","abstract":[{"text":"A property wrapper type that can designate properties of app state that can be directly bindable","type":"text"},{"text":" ","type":"text"},{"text":"in SwiftUI views.","type":"text"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"BindingState","kind":"identifier"}],"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingState","navigatorTitle":[{"text":"BindingState","kind":"identifier"}]},"doc://ComposableArchitecture/s17CustomReflectableP":{"title":"Swift.CustomReflectable","identifier":"doc:\/\/ComposableArchitecture\/s17CustomReflectableP","type":"unresolvable"},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"title":"ComposableArchitecture","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","role":"collection","abstract":[{"text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent","type":"text"},{"text":" ","type":"text"},{"text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in","type":"text"},{"text":" ","type":"text"},{"text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS).","type":"text"}],"kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture"},"doc://ComposableArchitecture/SH":{"title":"Swift.Hashable","identifier":"doc:\/\/ComposableArchitecture\/SH","type":"unresolvable"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/BindingState/projectedValue":{"kind":"symbol","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"projectedValue"},{"kind":"text","text":": "},{"preciseIdentifier":"s:22ComposableArchitecture12BindingStateV","kind":"typeIdentifier","text":"BindingState"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":">"}],"title":"projectedValue","abstract":[{"type":"text","text":"A projection that can be used to derive bindings from a view store."}],"type":"topic","role":"symbol","url":"\/documentation\/composablearchitecture\/bindingstate\/projectedvalue","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingState\/projectedValue","deprecated":true}}}