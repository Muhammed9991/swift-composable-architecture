{"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect"],["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect"]]},"metadata":{"roleHeading":"Enumeration","role":"symbol","externalID":"s:22ComposableArchitecture10TaskResultO","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"TaskResult"}],"platforms":[],"title":"TaskResult","symbolKind":"enum","modules":[{"name":"ComposableArchitecture"}],"navigatorTitle":[{"kind":"identifier","text":"TaskResult"}]},"variants":[{"paths":["\/documentation\/composablearchitecture\/taskresult"],"traits":[{"interfaceLanguage":"swift"}]}],"topicSections":[{"title":"Representing a task result","anchor":"Representing-a-task-result","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult\/success(_:)","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult\/failure(_:)"]},{"title":"Converting a throwing expression","anchor":"Converting-a-throwing-expression","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult\/init(catching:)"]},{"title":"Accessing a resultâ€™s value","anchor":"Accessing-a-results-value","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult\/value"]},{"title":"Transforming results","anchor":"Transforming-results","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult\/map(_:)","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult\/flatMap(_:)","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult\/init(_:)","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Swift\/Result\/init(_:)"]},{"title":"Default Implementations","generated":true,"anchor":"Default-Implementations","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult\/CasePathable-Implementations","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult\/Equatable-Implementations","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult\/Hashable-Implementations"]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult"},"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["macOS"],"languages":["swift"],"tokens":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"TaskResult","kind":"identifier"},{"text":"<","kind":"text"},{"text":"Success","kind":"genericParameter"},{"text":"> ","kind":"text"},{"text":"where","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Success","kind":"typeIdentifier"},{"text":" : ","kind":"text"},{"preciseIdentifier":"s:s8SendableP","text":"Sendable","kind":"typeIdentifier"}]}]},{"kind":"content","content":[{"text":"Overview","anchor":"overview","level":2,"type":"heading"},{"inlineContent":[{"type":"text","text":"This type is needed because Swiftâ€™s concurrency tools can only express untyped errors, such as"},{"type":"text","text":" "},{"code":"async","type":"codeVoice"},{"type":"text","text":" functions and "},{"code":"AsyncSequence","type":"codeVoice"},{"type":"text","text":", and so their output can realistically only be bridged to"},{"type":"text","text":" "},{"code":"Result<_, any Error>","type":"codeVoice"},{"type":"text","text":". However, "},{"code":"Result<_, any Error>","type":"codeVoice"},{"type":"text","text":" is never "},{"code":"Equatable","type":"codeVoice"},{"type":"text","text":" since "},{"code":"Error","type":"codeVoice"},{"type":"text","text":" is not"},{"type":"text","text":" "},{"code":"Equatable","type":"codeVoice"},{"type":"text","text":", and equatability is very important for testing in the Composable Architecture. By"},{"type":"text","text":" "},{"type":"text","text":"defining our own type we get the ability to recover equatability in most situations."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"If someday Swift gets typed "},{"type":"codeVoice","code":"throws"},{"type":"text","text":", then we can eliminate this type and rely solely on"},{"type":"text","text":" "},{"type":"codeVoice","code":"Result"},{"type":"text","text":"."}],"type":"paragraph"},{"inlineContent":[{"text":"You typically use this type as the payload of an action which receives a response from an","type":"text"},{"text":" ","type":"text"},{"text":"effect:","type":"text"}],"type":"paragraph"},{"code":["enum Action: Equatable {","  case factButtonTapped","  case factResponse(TaskResult<String>)","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"Then you can model your dependency as using simple "},{"type":"codeVoice","code":"async"},{"type":"text","text":" and "},{"type":"codeVoice","code":"throws"},{"type":"text","text":" functionality:"}],"type":"paragraph"},{"code":["struct NumberFactClient {","  var fetch: (Int) async throws -> String","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"text":"And finally you can use ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect\/run(priority:operation:catch:fileID:filePath:line:column:)","isActive":true},{"text":" to construct an","type":"text"},{"text":" ","type":"text"},{"text":"effect in the reducer that invokes the ","type":"text"},{"type":"codeVoice","code":"numberFact"},{"text":" endpoint and wraps its response in a","type":"text"},{"text":" ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult","isActive":true},{"text":" by using its catching initializer, ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult\/init(catching:)","isActive":true},{"text":":","type":"text"}],"type":"paragraph"},{"code":["case .factButtonTapped:","  return .run { send in","    await send(","      .factResponse(","        TaskResult { try await self.numberFact.fetch(state.number) }","      )","    )","  }","","case let .factResponse(.success(fact)):","  \/\/ do something with fact","","case .factResponse(.failure):","  \/\/ handle error","","\/\/ ...","}"],"syntax":"swift","type":"codeListing"},{"text":"Equality","anchor":"Equality","level":2,"type":"heading"},{"inlineContent":[{"type":"text","text":"The biggest downside to using an untyped "},{"code":"Error","type":"codeVoice"},{"type":"text","text":" in a result type is that the result will not"},{"type":"text","text":" "},{"type":"text","text":"be equatable even if the success type is. This negatively affects your ability to test features"},{"type":"text","text":" "},{"type":"text","text":"that use "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult","isActive":true,"type":"reference"},{"type":"text","text":" in their actions with the "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore","isActive":true,"type":"reference"},{"type":"text","text":"."}],"type":"paragraph"},{"inlineContent":[{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult"},{"text":" does extra work to try to maintain equatability when possible. If the underlying","type":"text"},{"text":" ","type":"text"},{"text":"type masked by the ","type":"text"},{"type":"codeVoice","code":"Error"},{"text":" is ","type":"text"},{"type":"codeVoice","code":"Equatable"},{"text":", then it will use that ","type":"text"},{"type":"codeVoice","code":"Equatable"},{"text":" conformance","type":"text"},{"text":" ","type":"text"},{"text":"on two failures. Luckily, most errors thrown by Appleâ€™s frameworks are already equatable, and","type":"text"},{"text":" ","type":"text"},{"text":"because errors are typically simple value types, it is usually possible to have the compiler","type":"text"},{"text":" ","type":"text"},{"text":"synthesize a conformance for you.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"If you are testing the unhappy path of a feature that feeds a "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult","isActive":true},{"type":"text","text":" back into the"},{"type":"text","text":" "},{"type":"text","text":"system, be sure to conform the error to equatable, or the test will fail:"}],"type":"paragraph"},{"code":["\/\/ Set up a failing dependency","struct RefreshFailure: Error {}","store.dependencies.apiClient.fetchFeed = { throw RefreshFailure() }","","\/\/ Simulate pull-to-refresh","store.send(.refresh) { $0.isLoading = true }","","\/\/ Assert against failure","await store.receive(.refreshResponse(.failure(RefreshFailure())) { \/\/ ðŸ›‘","  $0.errorLabelText = \"An error occurred.\"","  $0.isLoading = false","}","\/\/ ðŸ›‘ 'RefreshFailure' is not equatable"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"To get a passing test, explicitly conform your custom error to the "},{"code":"Equatable","type":"codeVoice"},{"type":"text","text":" protocol:"}],"type":"paragraph"},{"code":["\/\/ Set up a failing dependency","struct RefreshFailure: Error, Equatable {} \/\/ ðŸ‘ˆ","store.dependencies.apiClient.fetchFeed = { throw RefreshFailure() }","","\/\/ Simulate pull-to-refresh","store.send(.refresh) { $0.isLoading = true }","","\/\/ Assert against failure","await store.receive(.refreshResponse(.failure(RefreshFailure())) { \/\/ âœ…","  $0.errorLabelText = \"An error occurred.\"","  $0.isLoading = false","}"],"syntax":"swift","type":"codeListing"}]}],"deprecationSummary":[{"inlineContent":[{"type":"text","text":"Use 'Result', instead. See the following migration guide for more information: https:\/\/pointfreeco.github.io\/swift-composable-architecture\/main\/documentation\/composablearchitecture\/migratingto1.4#Moving-off-of-TaskResult"}],"type":"paragraph"}],"kind":"symbol","seeAlsoSections":[{"title":"Creating an effect","generated":true,"anchor":"Creating-an-effect","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect\/none","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect\/run(priority:operation:catch:fileID:filePath:line:column:)","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect\/send(_:)","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/EffectOf"]}],"sections":[],"abstract":[{"text":"A value that represents either a success or a failure. This type differs from Swiftâ€™s ","type":"text"},{"code":"Result","type":"codeVoice"},{"text":" ","type":"text"},{"text":"type in that it uses only one generic for the success case, leaving the failure case as an","type":"text"},{"text":" ","type":"text"},{"text":"untyped ","type":"text"},{"code":"Error","type":"codeVoice"},{"text":".","type":"text"}],"relationshipsSections":[{"kind":"relationships","title":"Conforms To","type":"conformsTo","identifiers":["doc:\/\/ComposableArchitecture\/9CasePaths0A8PathableP","doc:\/\/ComposableArchitecture\/s8CopyableP","doc:\/\/ComposableArchitecture\/SQ","doc:\/\/ComposableArchitecture\/SH","doc:\/\/ComposableArchitecture\/s8SendableP"]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/TaskResult/value":{"role":"symbol","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"value"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Success"}],"abstract":[{"text":"Returns the success value as a throwing property.","type":"text"}],"title":"value","deprecated":true,"url":"\/documentation\/composablearchitecture\/taskresult\/value","kind":"symbol","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult\/value"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore":{"kind":"symbol","url":"\/documentation\/composablearchitecture\/teststore","role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore","abstract":[{"text":"A testable runtime for a reducer.","type":"text"}],"fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"TestStore","kind":"identifier"}],"type":"topic","title":"TestStore","navigatorTitle":[{"text":"TestStore","kind":"identifier"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/EffectOf":{"title":"EffectOf","url":"\/documentation\/composablearchitecture\/effectof","abstract":[{"text":"A convenience type alias for referring to an effect of a given reducerâ€™s domain.","type":"text"}],"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/EffectOf","fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"EffectOf","kind":"identifier"}],"navigatorTitle":[{"text":"EffectOf","kind":"identifier"}],"role":"symbol","kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TaskResult/CasePathable-Implementations":{"type":"topic","abstract":[],"url":"\/documentation\/composablearchitecture\/taskresult\/casepathable-implementations","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult\/CasePathable-Implementations","title":"CasePathable Implementations","role":"collectionGroup","kind":"article"},"doc://ComposableArchitecture/9CasePaths0A8PathableP":{"title":"CasePaths.CasePathable","type":"unresolvable","identifier":"doc:\/\/ComposableArchitecture\/9CasePaths0A8PathableP"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TaskResult/Equatable-Implementations":{"kind":"article","type":"topic","title":"Equatable Implementations","url":"\/documentation\/composablearchitecture\/taskresult\/equatable-implementations","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult\/Equatable-Implementations","abstract":[],"role":"collectionGroup"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TaskResult/init(_:)":{"role":"symbol","title":"init(_:)","fragments":[{"text":"init","kind":"identifier"},{"text":"<","kind":"text"},{"text":"Failure","kind":"genericParameter"},{"text":">(","kind":"text"},{"preciseIdentifier":"s:s6ResultO","text":"Result","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Success","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"Failure","kind":"typeIdentifier"},{"text":">)","kind":"text"}],"kind":"symbol","url":"\/documentation\/composablearchitecture\/taskresult\/init(_:)","abstract":[{"type":"text","text":"Transforms a "},{"type":"codeVoice","code":"Result"},{"type":"text","text":" into a "},{"type":"codeVoice","code":"TaskResult"},{"type":"text","text":", erasing its "},{"type":"codeVoice","code":"Failure"},{"type":"text","text":" to "},{"type":"codeVoice","code":"Error"},{"type":"text","text":"."}],"type":"topic","deprecated":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult\/init(_:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TaskResult/init(catching:)":{"title":"init(catching:)","type":"topic","kind":"symbol","abstract":[{"type":"text","text":"Creates a new task result by evaluating an async throwing closure, capturing the returned"},{"type":"text","text":" "},{"type":"text","text":"value as a success, or any thrown error as a failure."}],"role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult\/init(catching:)","url":"\/documentation\/composablearchitecture\/taskresult\/init(catching:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"("},{"kind":"externalParam","text":"catching"},{"kind":"text","text":": () "},{"kind":"keyword","text":"async"},{"kind":"text","text":" "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"Success"},{"kind":"text","text":") "},{"kind":"keyword","text":"async"}],"deprecated":true},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Effect/none":{"kind":"symbol","url":"\/documentation\/composablearchitecture\/effect\/none","type":"topic","abstract":[{"text":"An effect that does nothing and completes immediately. Useful for situations where you must","type":"text"},{"text":" ","type":"text"},{"text":"return an effect, but you donâ€™t need to do anything.","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect\/none","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"none","kind":"identifier"},{"text":": ","kind":"text"},{"text":"Effect","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture6EffectV"},{"text":"<","kind":"text"},{"text":"Action","kind":"typeIdentifier"},{"text":">","kind":"text"}],"role":"symbol","title":"none"},"doc://ComposableArchitecture/s8CopyableP":{"type":"unresolvable","identifier":"doc:\/\/ComposableArchitecture\/s8CopyableP","title":"Swift.Copyable"},"doc://ComposableArchitecture/SH":{"title":"Swift.Hashable","type":"unresolvable","identifier":"doc:\/\/ComposableArchitecture\/SH"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TaskResult":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult","deprecated":true,"title":"TaskResult","kind":"symbol","abstract":[{"text":"A value that represents either a success or a failure. This type differs from Swiftâ€™s ","type":"text"},{"type":"codeVoice","code":"Result"},{"text":" ","type":"text"},{"text":"type in that it uses only one generic for the success case, leaving the failure case as an","type":"text"},{"text":" ","type":"text"},{"text":"untyped ","type":"text"},{"type":"codeVoice","code":"Error"},{"text":".","type":"text"}],"role":"symbol","fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"TaskResult","kind":"identifier"}],"url":"\/documentation\/composablearchitecture\/taskresult","type":"topic","navigatorTitle":[{"text":"TaskResult","kind":"identifier"}]},"doc://ComposableArchitecture/SQ":{"type":"unresolvable","identifier":"doc:\/\/ComposableArchitecture\/SQ","title":"Swift.Equatable"},"doc://ComposableArchitecture/s8SendableP":{"title":"Swift.Sendable","type":"unresolvable","identifier":"doc:\/\/ComposableArchitecture\/s8SendableP"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Effect/send(_:)":{"type":"topic","url":"\/documentation\/composablearchitecture\/effect\/send(_:)","title":"send(_:)","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect\/send(_:)","kind":"symbol","role":"symbol","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"send","kind":"identifier"},{"text":"(","kind":"text"},{"text":"Action","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Effect","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture6EffectV"},{"text":"<","kind":"text"},{"text":"Action","kind":"typeIdentifier"},{"text":">","kind":"text"}],"abstract":[{"type":"text","text":"Initializes an effect that immediately emits the action passed in."}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Effect/run(priority:operation:catch:fileID:filePath:line:column:)":{"role":"symbol","kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect\/run(priority:operation:catch:fileID:filePath:line:column:)","type":"topic","url":"\/documentation\/composablearchitecture\/effect\/run(priority:operation:catch:fileid:filepath:line:column:)","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"run","kind":"identifier"},{"text":"(","kind":"text"},{"text":"priority","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"TaskPriority","kind":"typeIdentifier","preciseIdentifier":"s:ScP"},{"text":"?, ","kind":"text"},{"text":"operation","kind":"externalParam"},{"text":": (","kind":"text"},{"text":"Send","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture4SendV"},{"text":"<","kind":"text"},{"text":"Action","kind":"typeIdentifier"},{"text":">) ","kind":"text"},{"text":"async","kind":"keyword"},{"text":" ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Void","kind":"typeIdentifier","preciseIdentifier":"s:s4Voida"},{"text":", ","kind":"text"},{"text":"catch","kind":"externalParam"},{"text":": ((any ","kind":"text"},{"text":"Error","kind":"typeIdentifier","preciseIdentifier":"s:s5ErrorP"},{"text":", ","kind":"text"},{"text":"Send","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture4SendV"},{"text":"<","kind":"text"},{"text":"Action","kind":"typeIdentifier"},{"text":">) ","kind":"text"},{"text":"async","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Void","kind":"typeIdentifier","preciseIdentifier":"s:s4Voida"},{"text":")?, ","kind":"text"},{"text":"fileID","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"StaticString","kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV"},{"text":", ","kind":"text"},{"text":"filePath","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"StaticString","kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV"},{"text":", ","kind":"text"},{"text":"line","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"UInt","kind":"typeIdentifier","preciseIdentifier":"s:Su"},{"text":", ","kind":"text"},{"text":"column","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"UInt","kind":"typeIdentifier","preciseIdentifier":"s:Su"},{"text":") -> ","kind":"text"},{"text":"Effect","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture6EffectV"},{"text":"<","kind":"text"},{"text":"Action","kind":"typeIdentifier"},{"text":">","kind":"text"}],"abstract":[{"text":"Wraps an asynchronous unit of work that can emit actions any number of times in an effect.","type":"text"}],"title":"run(priority:operation:catch:fileID:filePath:line:column:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TaskResult/map(_:)":{"abstract":[{"type":"text","text":"Returns a new task result, mapping any success value using the given transformation."}],"url":"\/documentation\/composablearchitecture\/taskresult\/map(_:)","kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult\/map(_:)","role":"symbol","deprecated":true,"type":"topic","title":"map(_:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"map","kind":"identifier"},{"text":"<","kind":"text"},{"text":"NewSuccess","kind":"genericParameter"},{"text":">((","kind":"text"},{"text":"Success","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"NewSuccess","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"TaskResult","preciseIdentifier":"s:22ComposableArchitecture10TaskResultO","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"NewSuccess","kind":"typeIdentifier"},{"text":">","kind":"text"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TaskResult/success(_:)":{"role":"symbol","title":"TaskResult.success(_:)","abstract":[{"text":"A success, storing a ","type":"text"},{"code":"Success","type":"codeVoice"},{"text":" value.","type":"text"}],"kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult\/success(_:)","fragments":[{"text":"case","kind":"keyword"},{"text":" ","kind":"text"},{"text":"success","kind":"identifier"},{"text":"(","kind":"text"},{"text":"Success","kind":"typeIdentifier"},{"text":")","kind":"text"}],"deprecated":true,"url":"\/documentation\/composablearchitecture\/taskresult\/success(_:)","type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TaskResult/failure(_:)":{"type":"topic","title":"TaskResult.failure(_:)","kind":"symbol","role":"symbol","fragments":[{"kind":"keyword","text":"case"},{"kind":"text","text":" "},{"kind":"identifier","text":"failure"},{"kind":"text","text":"(any "},{"kind":"typeIdentifier","text":"Error","preciseIdentifier":"s:s5ErrorP"},{"kind":"text","text":")"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult\/failure(_:)","deprecated":true,"url":"\/documentation\/composablearchitecture\/taskresult\/failure(_:)","abstract":[{"type":"text","text":"A failure, storing an error."}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TaskResult/flatMap(_:)":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult\/flatMap(_:)","role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"flatMap","kind":"identifier"},{"text":"<","kind":"text"},{"text":"NewSuccess","kind":"genericParameter"},{"text":">((","kind":"text"},{"text":"Success","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"preciseIdentifier":"s:22ComposableArchitecture10TaskResultO","text":"TaskResult","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"NewSuccess","kind":"typeIdentifier"},{"text":">) -> ","kind":"text"},{"preciseIdentifier":"s:22ComposableArchitecture10TaskResultO","text":"TaskResult","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"NewSuccess","kind":"typeIdentifier"},{"text":">","kind":"text"}],"kind":"symbol","type":"topic","title":"flatMap(_:)","deprecated":true,"abstract":[{"type":"text","text":"Returns a new task result, mapping any success value using the given transformation and"},{"type":"text","text":" "},{"type":"text","text":"unwrapping the produced result."}],"url":"\/documentation\/composablearchitecture\/taskresult\/flatmap(_:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Swift/Result/init(_:)":{"kind":"symbol","title":"init(_:)","conformance":{"conformancePrefix":[{"text":"Conforms when","type":"text"}],"availabilityPrefix":[{"text":"Available when","type":"text"}],"constraints":[{"code":"Success","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"Sendable","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"Failure","type":"codeVoice"},{"text":" is ","type":"text"},{"code":"any Error","type":"codeVoice"},{"text":".","type":"text"}]},"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Swift\/Result\/init(_:)","fragments":[{"text":"init","kind":"identifier"},{"text":"(","kind":"text"},{"preciseIdentifier":"s:22ComposableArchitecture10TaskResultO","text":"TaskResult","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Success","kind":"typeIdentifier"},{"text":">)","kind":"text"}],"type":"topic","role":"symbol","abstract":[{"type":"text","text":"Transforms a "},{"type":"codeVoice","code":"TaskResult"},{"type":"text","text":" into a "},{"type":"codeVoice","code":"Result"},{"type":"text","text":"."}],"url":"\/documentation\/composablearchitecture\/swift\/result\/init(_:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer":{"abstract":[{"type":"text","text":"A protocol that describes how to evolve the current state of an application to the next state,"},{"type":"text","text":" "},{"type":"text","text":"given an action, and describes what "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect"},{"type":"text","text":"s should be executed later by the store, if any."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","role":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/reducer","fragments":[{"kind":"keyword","text":"protocol"},{"kind":"text","text":" "},{"kind":"identifier","text":"Reducer"}],"title":"Reducer","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"Reducer"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TaskResult/Hashable-Implementations":{"role":"collectionGroup","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult\/Hashable-Implementations","url":"\/documentation\/composablearchitecture\/taskresult\/hashable-implementations","kind":"article","type":"topic","title":"Hashable Implementations","abstract":[]},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"title":"ComposableArchitecture","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","role":"collection","abstract":[{"text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent","type":"text"},{"text":" ","type":"text"},{"text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in","type":"text"},{"text":" ","type":"text"},{"text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS).","type":"text"}],"kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Effect":{"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Effect","kind":"identifier"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect","kind":"symbol","url":"\/documentation\/composablearchitecture\/effect","abstract":[],"type":"topic","role":"symbol","navigatorTitle":[{"text":"Effect","kind":"identifier"}],"title":"Effect"}}}