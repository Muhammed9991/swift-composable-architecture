{"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigrationGuides"]]},"schemaVersion":{"patch":0,"minor":3,"major":0},"metadata":{"title":"Migrating to 1.11","roleHeading":"Article","modules":[{"name":"ComposableArchitecture"}],"role":"article"},"abstract":[{"text":"Update your code to use the new ","type":"text"},{"type":"codeVoice","code":"withLock"},{"text":" method for mutating shared state from asynchronous","type":"text"},{"text":" ","type":"text"},{"text":"contexts, rather than mutating the underlying wrapped value directly.","type":"text"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/composablearchitecture\/migratingto1.11"]}],"seeAlsoSections":[{"identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.19","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.18","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.17.1","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.17","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.16","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.15","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.14","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.13","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.12","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.10","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.9","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.8","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.7","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.6","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.5","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.4"],"generated":true}],"primaryContentSections":[{"kind":"content","content":[{"anchor":"Overview","type":"heading","text":"Overview","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"The Composable Architecture is under constant development, and we are always looking for ways to"},{"type":"text","text":" "},{"type":"text","text":"simplify the library, and make it more powerful. This version of the library introduced 2 new"},{"type":"text","text":" "},{"type":"text","text":"APIs and deprecated 1 API."}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Before following this migration guide be sure you have fully migrated to the newest"},{"type":"text","text":" "},{"type":"text","text":"tools of version 1.10. See "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigrationGuides"},{"type":"text","text":" for more information."}]}],"type":"aside","style":"important","name":"Important"},{"items":[{"content":[{"inlineContent":[{"type":"reference","identifier":"#Mutating-shared-state-concurrently","isActive":true}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"identifier":"#Supplying-mock-read-only-state-to-previews","isActive":true,"type":"reference"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"reference","isActive":true,"identifier":"#Migrating-to-1112"}],"type":"paragraph"}]}],"type":"unorderedList"},{"anchor":"Mutating-shared-state-concurrently","type":"heading","text":"Mutating shared state concurrently","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"Version 1.10 of the Composable Architecture introduced a powerful tool for"},{"type":"text","text":" "},{"type":"reference","isActive":true,"overridingTitleInlineContent":[{"type":"text","text":"sharing state"}],"overridingTitle":"sharing state","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SharingState"},{"type":"text","text":" amongst your features. And you can mutate a piece of shared"},{"type":"text","text":" "},{"type":"text","text":"state directly, as if it were just a normal property on a value type:"}]},{"syntax":"swift","code":["case .incrementButtonTapped:","  state.count += 1","  return .none"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"And if you only ever mutate shared state from a reducer, then this is completely fine to do.","type":"text"},{"text":" ","type":"text"},{"text":"However, because shared values are secretly references (that is how data is shared), it is possible","type":"text"},{"text":" ","type":"text"},{"text":"to mutate shared values from effects, which means concurrently. And prior to 1.11, it was possible","type":"text"},{"text":" ","type":"text"},{"text":"to do this directly:","type":"text"}]},{"syntax":"swift","code":["case .delayedIncrementButtonTapped:","  return .run { _ in","    @Shared(.count) var count","    count += 1","  }"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"Now, ","type":"text"},{"code":"Shared","type":"codeVoice"},{"text":" is ","type":"text"},{"code":"Sendable","type":"codeVoice"},{"text":", and is technically thread-safe in that it will not crash when writing","type":"text"},{"text":" ","type":"text"},{"text":"to it from two different threads. However, allowing direct mutation does make the value susceptible","type":"text"},{"text":" ","type":"text"},{"text":"to race conditions. If you were to perform ","type":"text"},{"code":"count += 1","type":"codeVoice"},{"text":" from 1,000 threads, it is possible for","type":"text"},{"text":" ","type":"text"},{"text":"the final value to not be 1,000.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"We wanted the ","type":"text"},{"type":"codeVoice","code":"@Shared"},{"text":" type to be as ergonomic as possible, and that is why we make it directly","type":"text"},{"text":" ","type":"text"},{"text":"mutable, but we should not be allowing these mutations to happen from asynchronous contexts. And so","type":"text"},{"text":" ","type":"text"},{"text":"now the ","type":"text"},{"type":"codeVoice","code":"wrappedValue"},{"text":" setter has been marked unavailable from asynchronous contexts, with","type":"text"},{"text":" ","type":"text"},{"text":"a helpful message of how to fix:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["case .delayedIncrementButtonTapped:","  return .run { _ in","    @Shared(.count) var count","    count += 1  \/\/ ⚠️ Use '$shared.withLock' instead of mutating directly.","  }"]},{"type":"paragraph","inlineContent":[{"text":"To fix this deprecation you can use the new ","type":"text"},{"type":"codeVoice","code":"withLock"},{"text":" method on the projected value of ","type":"text"},{"type":"codeVoice","code":"@Shared"},{"text":":","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["case .delayedIncrementButtonTapped:","  return .run { _ in","    @Shared(.count) var count","    $count.withLock { $0 += 1 }","  }"]},{"type":"paragraph","inlineContent":[{"text":"This locks the entire unit of work of reading the current count, incrementing it, and storing it","type":"text"},{"text":" ","type":"text"},{"text":"back in the reference.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Technically it is still possible to write code that has race conditions, such as this silly example:"}]},{"type":"codeListing","syntax":"swift","code":["let currentCount = count","$count.withLock { $0 = currentCount + 1 }"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"But there is no way to 100% prevent race conditions in code. Even actors are susceptible to problems"},{"type":"text","text":" "},{"type":"text","text":"due to re-entrancy. To avoid problems like the above we recommend wrapping as many mutations of the"},{"type":"text","text":" "},{"type":"text","text":"shared state as possible in a single "},{"type":"codeVoice","code":"withLock"},{"type":"text","text":". That will make sure that the full unit of work is"},{"type":"text","text":" "},{"type":"text","text":"guarded by a lock."}]},{"anchor":"Supplying-mock-read-only-state-to-previews","type":"heading","text":"Supplying mock read-only state to previews","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"A new "},{"type":"codeVoice","code":"constant"},{"type":"text","text":" helper on "},{"type":"codeVoice","code":"SharedReader"},{"type":"text","text":" has been introduced to simplify supplying mock data to"},{"type":"text","text":" "},{"type":"text","text":"Xcode previews. It works like SwiftUI’s "},{"type":"codeVoice","code":"Binding.constant"},{"type":"text","text":", but for shared references:"}]},{"type":"codeListing","syntax":"swift","code":["#Preview {","  FeatureView(","    store: Store(","      initialState: Feature.State(count: .constant(42))","    ) {","      Feature()","    }","  )",")"]},{"type":"heading","anchor":"Migrating-to-1112","level":2,"text":"Migrating to 1.11.2"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A few bug fixes landed in 1.11.2 that may be source breaking. They are described below:"}]},{"type":"heading","anchor":"withLock-is-now-MainActor","level":3,"text":"`withLock` is now `@MainActor`"},{"type":"paragraph","inlineContent":[{"text":"In ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.11","type":"reference","overridingTitle":"version 1.11","isActive":true,"overridingTitleInlineContent":[{"text":"version 1.11","type":"text"}]},{"text":" of the library we deprecated mutating shared state from","type":"text"},{"text":" ","type":"text"},{"text":"asynchronous contexts, such as effects, and instead recommended using the new ","type":"text"},{"type":"codeVoice","code":"withLock"},{"text":" method.","type":"text"},{"text":" ","type":"text"},{"text":"Doing so made it possible to lock all mutations to the shared state and prevent race conditions (see","type":"text"},{"text":" ","type":"text"},{"text":"the ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.11","type":"reference","overridingTitle":"migration guide","isActive":true,"overridingTitleInlineContent":[{"type":"text","text":"migration guide"}]},{"text":" for more info).","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"However, this did leave open the possibility for deadlocks if shared state was read from and written","type":"text"},{"text":" ","type":"text"},{"text":"to on different threads. To fix this we have now restricted ","type":"text"},{"code":"withLock","type":"codeVoice"},{"text":" to the ","type":"text"},{"code":"@MainActor","type":"codeVoice"},{"text":", and so","type":"text"},{"text":" ","type":"text"},{"text":"you will now need to ","type":"text"},{"code":"await","type":"codeVoice"},{"text":" its usage:","type":"text"}]},{"code":["-sharedCount.withLock { $0 += 1 }","+await sharedCount.withLock { $0 += 1 }"],"type":"codeListing","syntax":"diff"},{"type":"paragraph","inlineContent":[{"text":"The compiler should suggest this fix-it for you.","type":"text"}]},{"type":"heading","anchor":"Optional-dynamic-member-lookup-on-Shared-is-deprecateddisfavored","level":3,"text":"Optional dynamic member lookup on `Shared` is deprecated\/disfavored"},{"type":"paragraph","inlineContent":[{"type":"text","text":"When the "},{"type":"codeVoice","code":"@Shared"},{"type":"text","text":" property wrapper was first introduced, its dynamic member lookup was overloaded"},{"type":"text","text":" "},{"type":"text","text":"to automatically unwrap optionals for ergonomic purposes:"}]},{"code":["if let sharedUnwrappedProperty = $shared.optionalProperty {","  \/\/ ...","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"This unfortunately made dynamic member lookup a little more difficult to understand:","type":"text"}]},{"code":["$shared.optionalProperty  \/\/ Shared<Value>?, *not* Shared<Value?>"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"…and required casting and other tricks to transform shared values into what one might expect."}]},{"type":"paragraph","inlineContent":[{"text":"And so this dynamic member lookup is deprecated and has been disfavored, and will eventually be","type":"text"},{"text":" ","type":"text"},{"text":"removed entirely. Instead, you can use ","type":"text"},{"code":"Shared.init(_:)","type":"codeVoice"},{"text":" to explicitly unwrap a shared optional","type":"text"},{"text":" ","type":"text"},{"text":"value.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Disfavoring it does have the consequence of being source breaking in the case of "},{"type":"codeVoice","code":"if let"},{"type":"text","text":" and"},{"type":"text","text":" "},{"type":"codeVoice","code":"guard let"},{"type":"text","text":" expressions, where Swift does not select the optional overload automatically. To"},{"type":"text","text":" "},{"type":"text","text":"migrate, use "},{"type":"codeVoice","code":"Shared.init(_:)"},{"type":"text","text":":"}]},{"code":["-if let sharedUnwrappedProperty = $shared.optionalProperty {","+if let sharedUnwrappedProperty = Shared($shared.optionalProperty) {","   \/\/ ..."," }"],"type":"codeListing","syntax":"diff"}]}],"kind":"article","sections":[],"identifier":{"url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.11","interfaceLanguage":"swift"},"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigrationGuides":{"kind":"article","title":"Migration guides","url":"\/documentation\/composablearchitecture\/migrationguides","type":"topic","role":"collectionGroup","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigrationGuides","abstract":[{"text":"Learn how to upgrade your application to the newest version of the Composable Architecture.","type":"text"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.14":{"kind":"article","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.14","title":"Migrating to 1.14","role":"article","abstract":[{"text":"The ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store"},{"text":" type is now officially ","type":"text"},{"type":"codeVoice","code":"@MainActor"},{"text":" isolated.","type":"text"}],"type":"topic","url":"\/documentation\/composablearchitecture\/migratingto1.14"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.10":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.10","title":"Migrating to 1.10","role":"article","url":"\/documentation\/composablearchitecture\/migratingto1.10","kind":"article","abstract":[{"text":"Update your code to make use of the new state sharing tools in the library, such as the ","type":"text"},{"type":"codeVoice","code":"Shared"},{"text":" ","type":"text"},{"text":"property wrapper, and the ","type":"text"},{"type":"codeVoice","code":"appStorage"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"fileStorage"},{"text":" persistence strategies.","type":"text"}],"type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer/dependency(_:)":{"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"dependency"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Value"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"_DependencyKeyWritingReducer"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":">"}],"kind":"symbol","abstract":[{"text":"Places a value in the reducer’s dependencies.","type":"text"}],"type":"topic","url":"\/documentation\/composablearchitecture\/reducer\/dependency(_:)","title":"dependency(_:)","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/dependency(_:)","role":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.16":{"kind":"article","title":"Migrating to 1.16","url":"\/documentation\/composablearchitecture\/migratingto1.16","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.16","role":"article","abstract":[{"type":"text","text":"The "},{"type":"codeVoice","code":".appStorage"},{"type":"text","text":" strategy used with "},{"type":"codeVoice","code":"@Shared"},{"type":"text","text":" now uses key-value observing instead of"},{"type":"text","text":" "},{"type":"codeVoice","code":"NotificationCenter"},{"type":"text","text":" when possible. Learn how this may affect your code."}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.6":{"kind":"article","title":"Migrating to 1.6","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.6","role":"article","type":"topic","url":"\/documentation\/composablearchitecture\/migratingto1.6","abstract":[{"text":"Update your code to make use of the new","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"TestStore\/receive(_:_:timeout:assert:fileID:file:line:column:)-9jd7x"},{"text":" method when you need to","type":"text"},{"text":" ","type":"text"},{"text":"assert on the payload inside an action received.","type":"text"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.11":{"type":"topic","kind":"article","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.11","title":"Migrating to 1.11","role":"article","abstract":[{"type":"text","text":"Update your code to use the new "},{"code":"withLock","type":"codeVoice"},{"type":"text","text":" method for mutating shared state from asynchronous"},{"type":"text","text":" "},{"type":"text","text":"contexts, rather than mutating the underlying wrapped value directly."}],"url":"\/documentation\/composablearchitecture\/migratingto1.11"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.13":{"url":"\/documentation\/composablearchitecture\/migratingto1.13","title":"Migrating to 1.13","type":"topic","kind":"article","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.13","role":"article","abstract":[{"type":"text","text":"The Composable Architecture now provides first class tools for building features in UIKit,"},{"type":"text","text":" "},{"type":"text","text":"including minimal state observation, presentation and stack navigation."}]},"#Mutating-shared-state-concurrently":{"title":"Mutating shared state concurrently","url":"#Mutating-shared-state-concurrently","type":"link","identifier":"#Mutating-shared-state-concurrently","titleInlineContent":[{"text":"Mutating shared state concurrently","type":"text"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.8":{"abstract":[{"text":"Update your code to make use of the new capabilities of the ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()"},{"text":" macro, including automatic","type":"text"},{"text":" ","type":"text"},{"text":"fulfillment of requirements for destination reducers and path reducers.","type":"text"}],"role":"article","title":"Migrating to 1.8","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.8","url":"\/documentation\/composablearchitecture\/migratingto1.8","type":"topic","kind":"article"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.17":{"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.17","kind":"article","url":"\/documentation\/composablearchitecture\/migratingto1.17","role":"article","abstract":[{"type":"text","text":"The "},{"type":"codeVoice","code":"@Shared"},{"type":"text","text":" property wrapper and related tools have been extracted to their own"},{"type":"text","text":" "},{"type":"text","text":"library so that they can be used in non-Composable Architecture applications. This a"},{"type":"text","text":" "},{"type":"text","text":"backwards compatible change, but some new deprecations have been introduced."}],"title":"Migrating to 1.17"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store":{"navigatorTitle":[{"text":"Store","kind":"identifier"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","url":"\/documentation\/composablearchitecture\/store","abstract":[{"text":"A store represents the runtime that powers the application. It is the object that you will pass","type":"text"},{"text":" ","type":"text"},{"text":"around to views that need to interact with the application.","type":"text"}],"kind":"symbol","title":"Store","type":"topic","role":"symbol","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Store","kind":"identifier"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer()":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()","title":"Reducer()","url":"\/documentation\/composablearchitecture\/reducer()","type":"topic","kind":"symbol","fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Reducer","kind":"identifier"},{"text":"()","kind":"text"}],"abstract":[{"type":"text","text":"Helps implement the conformance to the "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","isActive":true},{"type":"text","text":" protocol for a type."}],"role":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.4":{"type":"topic","url":"\/documentation\/composablearchitecture\/migratingto1.4","title":"Migrating to 1.4","kind":"article","role":"article","abstract":[{"type":"text","text":"Update your code to make use of the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()"},{"type":"text","text":" macro, and learn how to better leverage case key"},{"type":"text","text":" "},{"type":"text","text":"paths in your features."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.4"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.19":{"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.19","kind":"article","title":"Migrating to 1.19","abstract":[{"text":"Store internals have been rewritten for performance and future features, and are now compatible with","type":"text"},{"text":" ","type":"text"},{"text":"SwiftUI’s ","type":"text"},{"type":"codeVoice","code":"@StateObject"},{"text":" property wrapper.","type":"text"}],"url":"\/documentation\/composablearchitecture\/migratingto1.19","role":"article"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.17.1":{"type":"topic","abstract":[{"type":"text","text":"The Sharing library has graduated, with backwards-incompatible changes, to 2.0, and the Composable"},{"type":"text","text":" "},{"type":"text","text":"Architecture has been updated to extend support to this new version."}],"kind":"article","url":"\/documentation\/composablearchitecture\/migratingto1.17.1","title":"Migrating to 1.17.1","role":"article","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.17.1"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore":{"kind":"symbol","url":"\/documentation\/composablearchitecture\/teststore","role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore","abstract":[{"text":"A testable runtime for a reducer.","type":"text"}],"fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"TestStore","kind":"identifier"}],"type":"topic","title":"TestStore","navigatorTitle":[{"text":"TestStore","kind":"identifier"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.18":{"title":"Migrating to 1.18","type":"topic","role":"article","abstract":[{"type":"text","text":"Stores now automatically cancel their in-flight effects when they deallocate. And another UIKit"},{"type":"text","text":" "},{"type":"text","text":"navigation helper has been introduced."}],"url":"\/documentation\/composablearchitecture\/migratingto1.18","kind":"article","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.18"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store/scope(state:action:)-90255":{"url":"\/documentation\/composablearchitecture\/store\/scope(state:action:)-90255","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/scope(state:action:)-90255","kind":"symbol","type":"topic","title":"scope(state:action:)","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"scope"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"ChildState"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"ChildAction"},{"kind":"text","text":">("},{"kind":"externalParam","text":"state"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:s7KeyPathC","text":"KeyPath"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"State"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"ChildState"},{"kind":"text","text":">, "},{"kind":"externalParam","text":"action"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:9CasePaths0A7KeyPatha","text":"CaseKeyPath"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"ChildAction"},{"kind":"text","text":">) -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture5StoreC","text":"Store"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"ChildState"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"ChildAction"},{"kind":"text","text":">"}],"role":"symbol","abstract":[{"text":"Scopes the store to one that exposes child state and actions.","type":"text"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SharingState":{"abstract":[{"text":"Learn techniques for sharing state throughout many parts of your application, and how to persist","type":"text"},{"text":" ","type":"text"},{"text":"data to user defaults, the file system, and other external mediums.","type":"text"}],"url":"\/documentation\/composablearchitecture\/sharingstate","title":"Sharing state","type":"topic","role":"article","kind":"article","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SharingState"},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"title":"ComposableArchitecture","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","role":"collection","abstract":[{"text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent","type":"text"},{"text":" ","type":"text"},{"text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in","type":"text"},{"text":" ","type":"text"},{"text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS).","type":"text"}],"kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.9":{"title":"Migrating to 1.9","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.9","role":"article","abstract":[{"text":"Update your code to make use of the new ","type":"text"},{"type":"codeVoice","code":"TestStore\/send(_:assert:fileID:file:line:column:)-8877x"},{"text":"","type":"text"},{"text":" ","type":"text"},{"text":"method on ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore"},{"text":" which gives a succinct syntax for sending actions with case key paths, and","type":"text"},{"text":" ","type":"text"},{"text":"the ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/dependency(_:)"},{"text":" method for overriding dependencies.","type":"text"}],"kind":"article","type":"topic","url":"\/documentation\/composablearchitecture\/migratingto1.9"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.15":{"type":"topic","title":"Migrating to 1.15","abstract":[{"type":"text","text":"The library has been completely updated for Swift 6 language mode, and now compiles in strict"},{"type":"text","text":" "},{"type":"text","text":"concurrency with no warnings or errors."}],"kind":"article","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.15","url":"\/documentation\/composablearchitecture\/migratingto1.15","role":"article"},"#Migrating-to-1112":{"type":"link","identifier":"#Migrating-to-1112","title":"Migrating to 1.11.2","url":"#Migrating-to-1112","titleInlineContent":[{"text":"Migrating to 1.11.2","type":"text"}]},"#Supplying-mock-read-only-state-to-previews":{"title":"Supplying mock read-only state to previews","url":"#Supplying-mock-read-only-state-to-previews","type":"link","identifier":"#Supplying-mock-read-only-state-to-previews","titleInlineContent":[{"text":"Supplying mock read-only state to previews","type":"text"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.12":{"role":"article","url":"\/documentation\/composablearchitecture\/migratingto1.12","abstract":[{"text":"Take advantage of custom decoding and encoding logic for the shared file storage persistence","type":"text"},{"text":" ","type":"text"},{"text":"strategy, as well as beta support for Swift’s native Testing framework.","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.12","type":"topic","kind":"article","title":"Migrating to 1.12"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.5":{"title":"Migrating to 1.5","role":"article","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.5","type":"topic","abstract":[{"type":"text","text":"Update your code to make use of the new "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/scope(state:action:)-90255"},{"type":"text","text":" operation on "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store"},{"type":"text","text":" "},{"type":"text","text":"in order to improve the performance of your features and simplify the usage of navigation APIs."}],"url":"\/documentation\/composablearchitecture\/migratingto1.5","kind":"article"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/IfLetStore":{"navigatorTitle":[{"text":"IfLetStore","kind":"identifier"}],"url":"\/documentation\/composablearchitecture\/ifletstore","title":"IfLetStore","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IfLetStore","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"IfLetStore","kind":"identifier"}],"deprecated":true,"abstract":[{"type":"text","text":"A view that safely unwraps a store of optional state in order to show one of two views."}],"kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ForEachStore":{"kind":"symbol","title":"ForEachStore","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ForEachStore"}],"url":"\/documentation\/composablearchitecture\/foreachstore","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ForEachStore","deprecated":true,"navigatorTitle":[{"kind":"identifier","text":"ForEachStore"}],"type":"topic","abstract":[{"text":"A Composable Architecture-friendly wrapper around ","type":"text"},{"code":"ForEach","type":"codeVoice"},{"text":" that simplifies working with","type":"text"},{"text":" ","type":"text"},{"text":"collections of state.","type":"text"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/WithViewStore":{"role":"symbol","kind":"symbol","deprecated":true,"type":"topic","url":"\/documentation\/composablearchitecture\/withviewstore","abstract":[{"type":"text","text":"A view helper that transforms a "},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","type":"reference"},{"type":"text","text":" into a "},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore","type":"reference"},{"type":"text","text":" so that its state can be observed"},{"type":"text","text":" "},{"type":"text","text":"by a view builder."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore","navigatorTitle":[{"kind":"identifier","text":"WithViewStore"}],"title":"WithViewStore","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"WithViewStore"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.7":{"url":"\/documentation\/composablearchitecture\/migratingto1.7","abstract":[{"type":"text","text":"Update your code to make use of the new observation tools in the library and get rid of legacy"},{"type":"text","text":" "},{"type":"text","text":"APIs such as "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore"},{"type":"text","text":", "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IfLetStore"},{"type":"text","text":", "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ForEachStore"},{"type":"text","text":", and more."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.7","kind":"article","title":"Migrating to 1.7","type":"topic","role":"article"}}}