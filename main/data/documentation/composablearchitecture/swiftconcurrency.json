{"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/composablearchitecture\/swiftconcurrency"]}],"schemaVersion":{"patch":0,"minor":3,"major":0},"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture"]]},"kind":"article","sections":[],"abstract":[{"type":"text","text":"Learn how to write safe, concurrent effects using Swift’s structured concurrency."}],"primaryContentSections":[{"kind":"content","content":[{"text":"Overview","type":"heading","anchor":"overview","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"As of version 5.6, Swift can provide many warnings for situations in which you might be using types"},{"type":"text","text":" "},{"type":"text","text":"and functions that are not thread-safe in concurrent contexts. Many of these warnings can be ignored"},{"type":"text","text":" "},{"type":"text","text":"for the time being, but in Swift 6 most (if not all) of these warnings will become errors, and so"},{"type":"text","text":" "},{"type":"text","text":"you will need to know how to prove to the compiler that your types are safe to use concurrently."}]},{"type":"paragraph","inlineContent":[{"text":"There primary way to create an ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect","isActive":true,"type":"reference"},{"text":" in the library is via","type":"text"},{"text":" ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect\/run(priority:operation:catch:fileID:filePath:line:column:)","isActive":true,"type":"reference"},{"text":". It takes a ","type":"text"},{"code":"@Sendable","type":"codeVoice"},{"text":", asynchronous closure,","type":"text"},{"text":" ","type":"text"},{"text":"which restricts the types of closures you can use for your effects. In particular, the closure can","type":"text"},{"text":" ","type":"text"},{"text":"only capture ","type":"text"},{"code":"Sendable","type":"codeVoice"},{"text":" variables that are bound with ","type":"text"},{"code":"let","type":"codeVoice"},{"text":". Mutable variables and non-","type":"text"},{"code":"Sendable","type":"codeVoice"},{"text":" ","type":"text"},{"text":"types are simply not allowed to be passed to ","type":"text"},{"code":"@Sendable","type":"codeVoice"},{"text":" closures.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"There are two primary ways you will run into this restriction when building a feature in the"},{"type":"text","text":" "},{"type":"text","text":"Composable Architecture: accessing state from within an effect, and accessing a dependency from"},{"type":"text","text":" "},{"type":"text","text":"within an effect."}]},{"text":"Accessing state in an effect","type":"heading","anchor":"Accessing-state-in-an-effect","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"Reducers are executed with a mutable, "},{"type":"codeVoice","code":"inout"},{"type":"text","text":" state variable, and such variables cannot be accessed"},{"type":"text","text":" "},{"type":"text","text":"from within "},{"type":"codeVoice","code":"@Sendable"},{"type":"text","text":" closures:"}]},{"type":"codeListing","code":["@Reducer","struct Feature {","  @ObservableState","  struct State { \/* ... *\/ }","  enum Action { \/* ... *\/ }","","  var body: some Reducer<State, Action> {","    Reduce { state, action in","      switch action {","      case .buttonTapped:","        return .run { send in","          try await Task.sleep(for: .seconds(1))","          await send(.delayed(state.count))","          \/\/ 🛑 Mutable capture of 'inout' parameter 'state' is","          \/\/    not allowed in concurrently-executing code","        }","","        \/\/ ...","      }","    }","  }","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"To work around this you must explicitly capture the state as an immutable value for the scope of the"},{"type":"text","text":" "},{"type":"text","text":"closure:"}]},{"type":"codeListing","code":["return .run { [state] send in","  try await Task.sleep(for: .seconds(1))","  await send(.delayed(state.count))  \/\/ ✅","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"You can also capture just the minimal parts of the state you need for the effect by binding a new","type":"text"},{"text":" ","type":"text"},{"text":"variable name for the capture:","type":"text"}]},{"type":"codeListing","code":["return .run { [count = state.count] send in","  try await Task.sleep(for: .seconds(1))","  await send(.delayed(count))  \/\/ ✅","}"],"syntax":"swift"},{"text":"Accessing dependencies in an effect","type":"heading","anchor":"Accessing-dependencies-in-an-effect","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"In the Composable Architecture, one provides dependencies to a reducer so that it can interact with"},{"type":"text","text":" "},{"type":"text","text":"the outside world in a deterministic and controlled manner. Those dependencies can be used from"},{"type":"text","text":" "},{"type":"text","text":"asynchronous and concurrent contexts, and so must be "},{"type":"codeVoice","code":"Sendable"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"text":"If your dependency is not sendable, you will be notified at the time of registering it with the","type":"text"},{"text":" ","type":"text"},{"text":"library. In particular, when extending ","type":"text"},{"code":"DependencyValues","type":"codeVoice"},{"text":" to provide the computed property:","type":"text"}]},{"type":"codeListing","code":["extension DependencyValues {","  var factClient: FactClient {","    get { self[FactClient.self] }","    set { self[FactClient.self] = newValue }","  }","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"If ","type":"text"},{"type":"codeVoice","code":"FactClient"},{"text":" is not ","type":"text"},{"type":"codeVoice","code":"Sendable"},{"text":", for whatever reason, you will get a warning in the ","type":"text"},{"type":"codeVoice","code":"get"},{"text":" ","type":"text"},{"text":"and ","type":"text"},{"type":"codeVoice","code":"set"},{"text":" lines:","type":"text"}]},{"type":"codeListing","code":["⚠️ Type 'FactClient' does not conform to the 'Sendable' protocol"],"syntax":null},{"type":"paragraph","inlineContent":[{"text":"To fix this you need to make each dependency ","type":"text"},{"type":"codeVoice","code":"Sendable"},{"text":". This usually just means making sure","type":"text"},{"text":" ","type":"text"},{"text":"that the interface type only holds onto ","type":"text"},{"type":"codeVoice","code":"Sendable"},{"text":" data, and in particular, any closure-based","type":"text"},{"text":" ","type":"text"},{"text":"endpoints should be annotated as ","type":"text"},{"type":"codeVoice","code":"@Sendable"},{"text":":","type":"text"}]},{"type":"codeListing","code":["struct FactClient {","  var fetch: @Sendable (Int) async throws -> String","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This will restrict the kinds of closures that can be used when constructing "},{"type":"codeVoice","code":"FactClient"},{"type":"text","text":" values, thus"},{"type":"text","text":" "},{"type":"text","text":"making the entire "},{"type":"codeVoice","code":"FactClient"},{"type":"text","text":" sendable itself."}]}]}],"metadata":{"role":"article","title":"Adopting Swift concurrency","modules":[{"name":"ComposableArchitecture"}],"roleHeading":"Article"},"seeAlsoSections":[{"title":"Integrations","generated":true,"anchor":"Integrations","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUIIntegration","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ObservationBackport","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/UIKit"]}],"identifier":{"url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftConcurrency","interfaceLanguage":"swift"},"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/UIKit":{"abstract":[{"type":"text","text":"Integrating the Composable Architecture into a UIKit application."}],"type":"topic","url":"\/documentation\/composablearchitecture\/uikit","title":"UIKit Integration","kind":"article","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/UIKit","role":"collectionGroup"},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"title":"ComposableArchitecture","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","role":"collection","abstract":[{"text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent","type":"text"},{"text":" ","type":"text"},{"text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in","type":"text"},{"text":" ","type":"text"},{"text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS).","type":"text"}],"kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Effect/run(priority:operation:catch:fileID:filePath:line:column:)":{"role":"symbol","kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect\/run(priority:operation:catch:fileID:filePath:line:column:)","type":"topic","url":"\/documentation\/composablearchitecture\/effect\/run(priority:operation:catch:fileid:filepath:line:column:)","fragments":[{"text":"static","kind":"keyword"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"run","kind":"identifier"},{"text":"(","kind":"text"},{"text":"priority","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"TaskPriority","kind":"typeIdentifier","preciseIdentifier":"s:ScP"},{"text":"?, ","kind":"text"},{"text":"operation","kind":"externalParam"},{"text":": (","kind":"text"},{"text":"Send","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture4SendV"},{"text":"<","kind":"text"},{"text":"Action","kind":"typeIdentifier"},{"text":">) ","kind":"text"},{"text":"async","kind":"keyword"},{"text":" ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Void","kind":"typeIdentifier","preciseIdentifier":"s:s4Voida"},{"text":", ","kind":"text"},{"text":"catch","kind":"externalParam"},{"text":": ((any ","kind":"text"},{"text":"Error","kind":"typeIdentifier","preciseIdentifier":"s:s5ErrorP"},{"text":", ","kind":"text"},{"text":"Send","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture4SendV"},{"text":"<","kind":"text"},{"text":"Action","kind":"typeIdentifier"},{"text":">) ","kind":"text"},{"text":"async","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Void","kind":"typeIdentifier","preciseIdentifier":"s:s4Voida"},{"text":")?, ","kind":"text"},{"text":"fileID","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"StaticString","kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV"},{"text":", ","kind":"text"},{"text":"filePath","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"StaticString","kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV"},{"text":", ","kind":"text"},{"text":"line","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"UInt","kind":"typeIdentifier","preciseIdentifier":"s:Su"},{"text":", ","kind":"text"},{"text":"column","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"UInt","kind":"typeIdentifier","preciseIdentifier":"s:Su"},{"text":") -> ","kind":"text"},{"text":"Effect","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture6EffectV"},{"text":"<","kind":"text"},{"text":"Action","kind":"typeIdentifier"},{"text":">","kind":"text"}],"abstract":[{"text":"Wraps an asynchronous unit of work that can emit actions any number of times in an effect.","type":"text"}],"title":"run(priority:operation:catch:fileID:filePath:line:column:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Effect":{"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Effect","kind":"identifier"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect","kind":"symbol","url":"\/documentation\/composablearchitecture\/effect","abstract":[],"type":"topic","role":"symbol","navigatorTitle":[{"text":"Effect","kind":"identifier"}],"title":"Effect"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ObservationBackport":{"title":"Observation backport","abstract":[{"type":"text","text":"Learn how the Observation framework from Swift 5.9 was backported to support iOS 16 and earlier,"},{"type":"text","text":" "},{"type":"text","text":"as well as the caveats of using the backported tools."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ObservationBackport","url":"\/documentation\/composablearchitecture\/observationbackport","type":"topic","role":"article","kind":"article"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SwiftUIIntegration":{"title":"SwiftUI Integration","url":"\/documentation\/composablearchitecture\/swiftuiintegration","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUIIntegration","kind":"article","role":"collectionGroup","abstract":[{"type":"text","text":"Integrating the Composable Architecture into a SwiftUI application."}]}}}